<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Magic ABC</title>
    <link href="./" rel="self" />
    <link href="./" />
    <id>./</id>
    <entry>
        <title type="html"><![CDATA[周记]]></title>
        <link href="life/20151019-weekly.html"/>
        <published>2015-10-18T16:00:00.000Z</published>
        <updated>2015-10-18T16:00:00.000Z</updated>
        <id>life/20151019-weekly.html</id>
        <content type="html" xml:base="" xml:lang="en">
            <![CDATA[ <p><strong> 摆酒过门 </strong></p>
<p>10月9日办的，中午12点才磕的头，急急忙忙的1点才开始，几乎没有迎宾。等每桌敬酒客人就已经吃饱要走了。<br>当天的安排上现在想想还是有些遗憾的，但是新生活在继续中又开始了。</p>
<p><strong> 本周其他要事 </strong></p>
<ol>
<li><p>在桂林吃了份辣椒炒粉，第二天拉了3次。。。。这食物的毒性甚过北京。</p>
</li>
<li><p>琅琊榜电视剧看完了，也是沉迷了几日。</p>
</li>
<li><p>桂林银行是不是有什么人得罪桂林网安了，一直被死咬不放，现在又拿流程不规范说事，暂时关闭了。</p>
</li>
<li><p>ios升级9.0.2，然后卡就不能用，没信号了。直到上周末找人修理，发现是我以前剪的大卡出问题了，去营业厅换张小卡就好了。<br>还以为要跟北京彻底告别呢，手机号还是北京的。</p>
</li>
<li><p>重仓大量分级A，一支股票都没有，就等着股市临时下跌呢。</p>
</li>
</ol>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[周记]]></title>
        <link href="life/20150929-weekly.html"/>
        <published>2015-09-27T16:00:00.000Z</published>
        <updated>2015-09-27T16:00:00.000Z</updated>
        <id>life/20150929-weekly.html</id>
        <content type="html" xml:base="" xml:lang="en">
            <![CDATA[ <p>绿色：140，67%<br>橙色：032，15%<br>黄色：028，13%<br>红色：009，04%  </p>
<p>总计：209<br>奖励：28/4 - 9/2 = 2.5 (一个半小时)</p>
<p><strong>本周要事</strong></p>
<ol>
<li><p>去兴业的事情黄了，也没怎么可惜，毕竟不想分居</p>
</li>
<li><p>电商被检测出重置任意用户密码的漏洞，原始的原因竟然是开发公司愚蠢的两次请求的接口写法，框架落后坑自己啊</p>
</li>
<li><p>看小说容易沉迷当前的情节，浪费时间</p>
</li>
</ol>
<p>看来本周没有发生积极的事情，遗憾。</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[周记]]></title>
        <link href="life/20150921-weekly.html"/>
        <published>2015-09-20T16:00:00.000Z</published>
        <updated>2015-09-20T16:00:00.000Z</updated>
        <id>life/20150921-weekly.html</id>
        <content type="html" xml:base="" xml:lang="en">
            <![CDATA[ <p>绿色: 119, 55.5%<br>黄色：055, 25.5%<br>蓝色：016, 7%<br>橙色：013, 6%<br>红色：003, 1.5%  </p>
<p>总计：206</p>
<p>本周发生的事情：</p>
<ol>
<li><p>下载了rails guide的git，在火车路上进行阅读，拓展了学习时间。</p>
</li>
<li><p>古摄影的产品很垃圾，完全没有后期，我妹子被迫自己成为了PS大神。现在承接婚纱照、写真照精修，100一张，满意为止。</p>
</li>
<li><p>周五少挣了1K，从中学到，止赢比止损更有本事，犹豫有风险。</p>
</li>
</ol>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[周记]]></title>
        <link href="life/20150913-weekly.html"/>
        <published>2015-09-12T16:00:00.000Z</published>
        <updated>2015-09-12T16:00:00.000Z</updated>
        <id>life/20150913-weekly.html</id>
        <content type="html" xml:base="" xml:lang="en">
            <![CDATA[ <p>绿色：100枚，46%<br>黄色：072枚，33%<br>橙色：026枚，12%<br>蓝色：011枚，5%<br>红色：008枚  </p>
<p>总计：209枚</p>
<p>有进步，黄色时间大量增加了，绿色的和橙色的这两周都差不多。<br>(黄色/4 - 红色/2) 努力产生的奖励时间是必须的，不然这个游戏就没有积极性。</p>
<p>本周发生的事情：</p>
<ol>
<li>hyc找我做个印刷系统的订单管理项目。调研中发现了nativescript，做原生app是好物。reactjs现在还不支持android。</li>
<li>配了新眼镜，拿到验光数据，视力不过度使用的话，已经不会有什么太大变动了。以后可以凭借这份验光数据在x宝多配几副在几个地方备用。</li>
<li>发现厉害的大学同班孙胖子是现在coding.net的CTO，我最近一直在公司和家里同步vagrant box，现在直接用coding，就不需要同步了。</li>
</ol>
<p>需要找个方式，一天记一事才行。</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[周记]]></title>
        <link href="life/20150906-weekly.html"/>
        <published>2015-09-05T16:00:00.000Z</published>
        <updated>2015-09-05T16:00:00.000Z</updated>
        <id>life/20150906-weekly.html</id>
        <content type="html" xml:base="" xml:lang="en">
            <![CDATA[ <p>绿色：128枚，80%<br>橙色：024枚，13%<br>红色：012枚，06%<br>黄色：004枚，02%  </p>
<p>总计：168枚  </p>
<p>这就是我现在的生活，都在绿色的琐事中渡过了。</p>
<p>本周的3件糗事：</p>
<ol>
<li>开车导航去南宁东，结果导航到火车东。一路上看到了路标，但是还是跟着错误的导航走。这里有3个错误：</li>
</ol>
<ul>
<li>导航上本身就有说明，以实际的路标指示为准。在路上，请随时注意路标，发生偏差时要停下来确认；</li>
<li>导航设定后，要检查设定的线路；</li>
<li>在路上，对线路产生怀疑时，要立刻停下来检查。前面一辆开奔驰的早掉头了，我比别人多走了一倍的路才掉头；</li>
</ul>
<ol>
<li><p>做事要早做准备，拖延没有好处，相关的资料和物品也提前准备好，这样能节省时间。去取房子发票的，没有提前拿上相关材料，导致先去取钥匙，然后又返回去取资料，很累人。</p>
</li>
<li><p>本周搬了新住处，3户合租的，房子小客厅大，厨房乱糟糟，不能好好做饭了。</p>
</li>
</ol>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[手游《神偷》设计分析]]></title>
        <link href="game-art/thief-game.html"/>
        <published>2015-02-14T16:00:00.000Z</published>
        <updated>2015-02-14T16:00:00.000Z</updated>
        <id>game-art/thief-game.html</id>
        <content type="html" xml:base="" xml:lang="en">
            <![CDATA[ <p><img src="res/thief.jpg" alt="game"></p>
<h2 id="it-is-simple">It is Simple</h2><p>The character is a black squre with eyes.<br>
It is a tap tap game, the character is controlled by tap. tap to jump, tap to change moving direction when the character touches the wall.</p>
<h2 id="charge1-player-39-s-design-are-variousness">Charge1: Player&#39;s Design are Variousness</h2><p>Every player get a room as secret base, they can enter other one&#39;s room to steal golds and ruby.<br>
You can buy the trap suit from mall and place the them to kill the invaders. different suit includes different traps, the amount of traps are restricted, you are allowed to use 1 suit at 1 time only.<br>
After you finish designing the room with traps, you must pass these traps 2 turns to prove that you don&#39;t obstruct the whole road, the others have the opportunity to steal something.</p>
<h2 id="charge2-steal-the-ruby">Charge2: Steal the Ruby</h2><p>When you steal others, you can use props to change the game be easier, such as character copies, slow time and break trap etc, these props are sell in mall.<br>
After you pass all traps and touch the ruby chest, you have opportunity to steal 1 ruby. the opportunity is decrease along with the times you die, so use props to reduce your death is good choice.<br>
In case you don&#39;t win the ruby, you can pay for rolling the dice again and again.</p>
<h2 id="charge3-ruby-combination">Charge3: Ruby Combination</h2><p>The game&#39;s goal is to combine better ruby, 2 ruby can combine to a better quality one.<br>
Ruby合成时需要消耗一定时间，这就留给其他人偷取ruby的机会。如果你不想合成中的宝石被偷掉，可以花钱立即完成合成进程。</p>
<h2 id="charge4-cloth-combination">Charge4: Cloth Combination</h2><p>角色的外观是通过材料合成的。材料只有4种，可以从商城购买。<br>
不直接从商城出售外观成品的原因，主要是可以在PVE中发放部分种类的材料。如果合成配方和角色等级相关，还可以促进玩家在每个等级段的外观消费。</p>
<h2 id="pvp-revenge">PVP: Revenge</h2><p>游戏的对抗是随机到某一个玩家的基地进行偷取，困难的陷阱会将入侵者杀死多次，这些杀伤数可以给基地增加收益。<br>
玩家会在上线后收到基地入侵通知，如果ruby被偷取，必然报复性的去偷取对方。假如通关后没有抽中仇人的ruby，由于愤怒和不甘必然消费进行多次抽取。</p>
<h2 id="game-pace">Game Pace</h2><p>为了控制玩家长时间的连续攻击他人，进入基地偷取前需要用手头的钥匙打开基地的锁。一扇门有很多把锁，玩家一定时间里只有有限的钥匙去试锁，因此玩家偷取次数就被控制了。<br>
基地的钥匙数量和门上的锁数量都可以通过升级基地提高。<br>
另外，低保设计，为了让死亡多次的玩家完成偷取，系统会禁用1个陷阱来降低关卡难度，保证不购买道具也可以通关。</p>
<h2 id="pve">PVE</h2><p>这里PVE特指不花RMB的功能点。<br>
基地中的陷阱是可以通过gold升级的，升级后会对死亡造成更多伤害，更快的降低别人抽到ruby的概率。<br>
地图上还有很多策划预设的关卡，通过这些预设关卡刷gold，来对基地进行升级。</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Minimal UI Elements for Game]]></title>
        <link href="game-art/minimal-ui-elements.html"/>
        <published>2015-02-08T16:00:00.000Z</published>
        <updated>2015-02-08T16:00:00.000Z</updated>
        <id>game-art/minimal-ui-elements.html</id>
        <content type="html" xml:base="" xml:lang="en">
            <![CDATA[ <h2 id="elements-for-game">Elements for Game</h2><ol>
<li>Banner in first screen</li>
<li>Button frame</li>
<li>Window frame</li>
<li>Next and prev button</li>
<li>Normal icons: config, close, star, heart, chest, locker, gem, coin, pause</li>
<li>Progress bar</li>
<li>Choose level: normal and boss, lock and unlock</li>
<li>List frame</li>
<li>Grid frame</li>
<li>In game background and tiles.</li>
<li>Poster</li>
</ol>
<h2 id="first-screen">First Screen</h2><p>It is composed by 2 things.<br>
<strong>Background</strong></p>
<p>It can be the clean color or a drawing. You can translate the drawing repeatly.
<img src="min-ui/firstscreen1.jpg" alt="firstscreen"></p>
<p><strong>Title and Characters</strong></p>
<p>You can show the title with big font only. you can also add some game characters behind the title.
You can add some float animation to the characters.
Only 1 thing is dynamic in both background and title&#39;s elements.
<img src="min-ui/firstscreen2.jpg" alt="firstscreen">
<img src="min-ui/firstscreen3.jpg" alt="firstscreen"></p>
<h2 id="button-frame">Button Frame</h2><p>You can draw some delicate button, or just use a clean color box with shadow as your button, but remember it should be enlarged as a frame.</p>
<h2 id="window-frame">Window Frame</h2><p>Normal border and clean color inside the content area, or try more simple design without border.
<img src="min-ui/window1.jpg" alt="window"></p>
<h2 id="choose-level">Choose Level</h2><ul>
<li>A background which is simple drawing or clean gradient color</li>
<li>A title as <em>&#39;CHOOSE LEVEL&#39;</em></li>
<li>Level icons</li>
<li>Next and prev button to shift level page</li>
</ul>
<p>A simple design is showing 5x5 grids for levels of each section, each section use different background.
<img src="min-ui/chooselevel.jpg" alt="chooselevel"></p>
<h2 id="list-frame">List Frame</h2><ul>
<li>Title and description</li>
<li>Neighbor item must be distinct, you can make this by light/dark color or item border</li>
<li>Item left is icon</li>
<li>Item middle is title and description</li>
<li>Item right is an event button</li>
<li>If the count of items more than 1 page,  do not use vertical scroll, flip page by next and prev button</li>
</ul>
<p><img src="min-ui/listframe.jpg" alt="listframe"></p>
<h2 id="grid-frame">Grid Frame</h2><ul>
<li>Clean color as background</li>
<li>Title on top</li>
<li>Item icon and selected cursor</li>
<li>Show description on bottom when item is selected</li>
<li>Do not use vertical scroll, use flip page</li>
</ul>
<p><img src="min-ui/gridframe.jpg" alt="gridframe"></p>
<h2 id="in-game-background-and-tiles">In Game Background and Tiles</h2><ul>
<li>Background -1 is a static shade, as paint by brush with clean color, it don&#39;t contain any detail. or you can use a sky drawing by gradient color</li>
<li>Background 1 is the near sight, it move follow by character</li>
<li>It must need 2 small tiles and 1 big tiles at least, and shade them with 2 colors, then you get 4+2 tiles</li>
</ul>
<p><img src="min-ui/gamescn1.jpg" alt="scn1">
<img src="min-ui/gamescn2.jpg" alt="scn2"></p>
<h2 id="poster">Poster</h2><ul>
<li>Title</li>
<li>Banner</li>
<li>Description</li>
<li>Event button on bottom with different color background</li>
</ul>
<p><img src="min-ui/poster.jpg" alt="poster"></p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[angular.js 笔记]]></title>
        <link href="idea/angularjs.html"/>
        <published>2015-01-01T16:00:00.000Z</published>
        <updated>2015-01-01T16:00:00.000Z</updated>
        <id>idea/angularjs.html</id>
        <content type="html" xml:base="" xml:lang="en">
            <![CDATA[ <h2 id="页面和路由定义优先设计">页面和路由定义优先设计</h2><p>所有页面模板可以包含在一个文件中：<br></p>
<pre>&lt;script type=&quot;text/ng-template&quot; id=&quot;index.html&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/ng-template&quot; id=&quot;list.html&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/ng-template&quot; id=&quot;content.html&quot;&gt;&lt;/script&gt;</pre><p>使用路由系统需要导入ngRoute：<br></p>
<pre>app.config([&#39;$routeProvider&#39;, function($routeProvider){}]);</pre><p>当你的操作想跳转到别的地址时，使用 $location.path=。<br></p>
<h2 id="控制器和服务">控制器和服务</h2><p>理论上一个页面一个控制器。控制器里面定义模型数据值，可以直接渲染成页面结果，非常直接方便。<br></p>
<pre>app.controller(&#39;index_controller&#39;, function($scope){
    $scope.some_model = value;
});</pre><p>一般模型的数据来源都是服务器端，从服务器端请求数据的抽象包装成服务的样子。一些在多个控制器共享的全局数据也可以装进服务里。<br></p>
<pre>app.factory(&#39;some_svr&#39;, function(){});</pre><h2 id="常用指令和服务">常用指令和服务</h2><ol>
<li>ng-app</li>
<li>ng-init 初始化一些模型值，调试或者配置的时候用；</li>
<li>ng-repeat dom元素重复</li>
<li>ng-show/ng-hide</li>
<li>ng-class</li>
<li>ng-click 控件点击行为</li>
<li>ng-controller</li>
<li>$location</li>
<li>$http ajax接口</li>
<li>$timeout 定时器</li>
<li>$q 异步委托promise</li>
</ol>
<h2 id="单机测试">单机测试</h2><p>因为有promise，所以可以无服务器的时候用promise模拟服务器响应结果，做单机demo很方便。以后接入服务器只需要修改服务的内部代码，而不需要调整结构。<br></p>
<pre>var df = $q.defer();
df.notify(value); //通知用户更新状态
df.resolve(value); //通知用户委托正常结束
df.reject(value); //通知用户委托异常结束

var p = df.promise;
p.then(fn1, fn2, fn3);</pre><p>模拟的时候用$timeout延时后给调用者反馈结果。实际调用服务器接口的时候也可以通过promise将多个原子接口包装成为一个业务。</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[离开游戏圈]]></title>
        <link href="life/201412-backhome.html"/>
        <published>2014-12-22T16:00:00.000Z</published>
        <updated>2014-12-22T16:00:00.000Z</updated>
        <id>life/201412-backhome.html</id>
        <content type="html" xml:base="" xml:lang="en">
            <![CDATA[ <p>回广西已经有一个月了，进了一家城商银行的科技部。<br>
老大已经给我们申报10w以上的税前年薪了，不过这个月还领不到钱，地方上的氛围还是老传统，办个事要经报党委书记的。<br>
平时每月只发60%的工资，剩下40%作为年底的绩效奖金。到底是谁想出来这么损的主意，拿别人的应得的钱作为胡萝卜。<br>
南宁的房价是7K-1W，仔细想想，总算是在可接受的范围内。我曾经有那么几天， 特别失落于每月3K-5K的工资，感觉不能愉快的购物了。实际上花钱的时候，我确实更谨慎了，这种谨慎已经很多年不曾有过了。<br>
<br>
我想过若是不如意，重新跑出去就是了。但是看到我妈周五同车来接我，周日又同车送我，打消了我的念头，这不就是我最初的执念么。<br>
短期内落差一般是存在的，但是谁能说一年后不会好转呢。刚刚回来立足，不得不从0开始。<br>
即便起薪低，我实际能做的事情还是比别人多一些。除去更多的进行股票交易:</p>
<ol>
<li>我需要从Elance中挣取更多的$，Unity和blender两方面均可。</li>
<li>继续学习ruby rails和前端。</li>
<li>参与这些圈子，获得remote job。</li>
</ol>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[demo《黑猫》的制作过程]]></title>
        <link href="game-art/blackcat.html"/>
        <published>2014-09-17T16:00:00.000Z</published>
        <updated>2014-09-17T16:00:00.000Z</updated>
        <id>game-art/blackcat.html</id>
        <content type="html" xml:base="" xml:lang="en">
            <![CDATA[ <p>这是工作7年后的第一次独立制作。上一次的独立制作是在7年前，在学校里为找工作准备的一些项目。</p>
<p>这次制作的目标是indie game
，虽然最终没有完成，但是制作过程可供回顾和参考。</p>
<h2 id="最初设计">最初设计</h2><p>制作游戏的第一步，就是要有点子。除了平时的记录和积累，用一个系统的头脑风暴流程来产生游戏点子更有效率。</p>
<p>我采用了一个称为<a href="http://www.gameseeds.net/">game seeds
</a>的思路。<strong>首先是以随机的方式定义一个主角的属性</strong>，比如：</p>
<blockquote>
<p>物种：生物</p>
<p>性别：female</p>
<p>时空：现今</p>
<p>习性：流动</p>
<p>身材：2x1（最大3x3）</p>
<p>生命：2（最大6，下同）</p>
<p>攻击：5</p>
<p>速度：4</p>
<p>智力：6</p>
<p>领导力：2</p>
</blockquote>
<p><strong>通过这些随机的属性，想象主角的样子，把他画到纸上，并写下他拥有的能力和性格</strong>。我想到的是一只优雅的黑猫，跑得快，能走钢丝，会瞬移，会电击。</p>
<p>用同样的方式，或者直接设计，再定义一个配角。我想到的是一个互补的角色，大黄狗，速度慢，但是生命力顽强，能撞坏一些较大的障碍物。</p>
<p><a href="http://www.gameseeds.net/">game seeds</a>预定义了30种游戏类型，<strong>以随机的方式，抽取主游戏类型和辅游戏类型，设计游戏特性</strong>。我抽取到的是spy和navigate。</p>
<p>spy是潜入游戏，我参考了很多的2D游戏的潜入设计，然后想了很多系统点子，最终精简到6条。</p>
<ul>
<li>移动和光影暴露系统。移动分快速和潜行</li>
<li>进入物体内躲避</li>
<li>AI视野和分级</li>
<li>跳箱子</li>
<li>走线和墙沿</li>
<li>电击</li>
</ul>
<p><strong>想很多点子，但是只选择5条，独立制作的工作量绝不可以大。</strong></p>
<h2 id="功能实现">功能实现</h2><p>做完最初设计，可以开始用代码和资源实现系统点子了。</p>
<p><img src="./blackcat/origi_snap.png" alt="origi_snap"></p>
<p>这就是我实现各种点子的关卡，花盘可以进入躲避，箱子和横杆可以跳跃，灯光增加你的暴露值，而守卫则用来发现你。</p>
<p>这些道具一字排开的摆在一个平面关卡中，逐步进行实现。素材都是自己画的方块，纯色的。<strong>实现基本功能点的时候，不要找素材，不要设计关卡，用成本最低的方式开始进行编码。</strong></p>
<h2 id="关卡设计">关卡设计</h2><p>等那几个游戏点子实现的差不多了，就可以开始设计第一关。我阅读了一些如何设计platformer关卡的文章，首先<strong>第一步是，画出关卡线路简图</strong>。有多简介呢？只用一根线表示地面和墙，随意的绘制整个关卡的区域线路，图上不考虑其他素材的放置。</p>
<p><img src="./blackcat/level_1.png" alt="level_1"></p>
<p><strong>紧接着设计一些关卡的局部特性</strong>。这些局部特性是独立的，可以复用的设计，不要放到关卡线路简图中考虑。比如躲避物和守卫的摆放设计，箱子和通道口的设计，陷阱摆放设计，地形局部设计等等。</p>
<p>局部特性是玩家在视野内面对的具体挑战，每一个设计都为玩家预留了破解方法。</p>
<p><img src="./blackcat/level_2.png" alt="level_2"></p>
<p><strong>做完了局部特性的设计，将他们放置在关卡线路图的特定位置上，重新绘制一份墙和地面有厚度的关卡地图</strong>。</p>
<p><img src="./blackcat/level_3.png" alt="level_3"></p>
<h2 id="制作关卡">制作关卡</h2><p>根据关卡设计图制作关卡，一定要使用地图编辑工具，极大提高效率。找到合适的tileset
后，用地图工具轻松的组装和调整。</p>
<p>首先要做的就是刷好地面，墙和基本背景墙，然后放置关卡的局部设计。局部设计中的各种资源都使用正式的素材和动画进行替换。</p>
<p>对关卡中空余的空间复用这些局部设计，进行一定的调整，充实关卡又尽可能不要产生太重复的感觉。一边调整一边运行游戏，保证自己也能跑通。</p>
<p>最后找来3种能体现关卡风格的背景素材或者tileset，铺设到关卡中，丰富关卡环境表现，每个房间也可以增加一种不同的素材来体现区别。</p>
<p><img src="./blackcat/last_snap.png" alt="last_snap"></p>
<h2 id="总结">总结</h2><ol>
<li>地图编辑器很重要，tilemap虽然简单，但不是很好的选择。那种自定义形状的关卡编辑器效率会更高。</li>
<li>素材是痛。设计游戏时，是否可提前指定素材包？</li>
</ol>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[有志者事竟成]]></title>
        <link href="life/close-to-goal.html"/>
        <published>2014-08-04T16:00:00.000Z</published>
        <updated>2014-08-04T16:00:00.000Z</updated>
        <id>life/close-to-goal.html</id>
        <content type="html" xml:base="" xml:lang="en">
            <![CDATA[ <p>今天我突然想明白一件事情：一个人的意向，会逐渐指导行为向目标靠拢。</p>
<ol>
<li>一个人最终会现实目标，耗时长短大体跟经验积累速度相关；</li>
<li>一个清晰的长期目标和计划，都会 <strong>执行失败</strong>；</li>
</ol>
<p>首先一个清晰的长期目标可能是一个伪命题。对我而言，从来没有清晰的定义自己的长期目标是什么，我只是模糊的想我要大概怎样怎样。<br>我曾经因为定义不了一个清晰的目标痛苦过，因为鸡汤里成功的人总是思路清晰，目标明确，似乎一出生就好像知道自己要成为什么角色。<br>多年下来，我发现人有恐惧。如果说欲望是目标纯粹的本身，那恐惧就是阻挡我们看清目标的烟雾弹。目标是长远的，我们恐惧这个遥远的目标是否只是镜水月花，是否能给与我们所付出的回报。  </p>
<p>我们确实不能准确的计算到达目标所需要的成本和收益，而时间成本是如此稀缺，我们现有的物质财富是如此匮乏，本能总是要我们先解决眼下的温饱。所以，我们根本不会相信自己所设定的清晰目标，把时间无条件的投入。<br>我们首先会投入时间安抚我们的恐惧，甚至克服恐惧会成为我们的其中一个目标。<br>因为恐惧，我们的目标非常容易动摇，一个动摇的目标，是不可能贯彻执行的。</p>
<p>欣慰的是，人只要有大概的意向，总是时不时的做一些事情向期望靠拢。比如暂时控制恐惧后，如果有其他意向，就会投入精力去接触，慢慢的会掌握更多的信息，渐渐实现目标。<br>如果同时有很多意向，多半是这块投入一点，那块投入一点，而不会一下子全投入到一点上以获得突破。这其实是本能，除非投入的结果很清晰，否则我们怎么会全身去投入呢。但清晰的目标是伪命题，就是因为不熟悉我们才会去学习，不熟悉时我们有怎么能定义清晰的结果呢。</p>
<p>所以你同时有很多想做的事情，又不能专注某件事，并不是你的错。人类向目标靠近的时候，其实用的是AStar寻路搜索算法（<em>AStart是启发式的广度优先搜索</em>）。</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[unity3d的纹理尺寸优化]]></title>
        <link href="game-art/unity3d-texture-compress.html"/>
        <published>2014-07-25T16:00:00.000Z</published>
        <updated>2014-07-25T16:00:00.000Z</updated>
        <id>game-art/unity3d-texture-compress.html</id>
        <content type="html" xml:base="" xml:lang="en">
            <![CDATA[ <p>如果想减少手游打包的尺寸，第一步要做的是分析找出热点。<br>在console窗口可以右键打开editorlog，里面列举了本次打包编译的所有资源和大小。进行归类和细分，定位哪块内容最占空间。</p>
<p>一般情况下，有以下3方面消耗了大量空间。</p>
<ol>
<li>UI 素材</li>
<li>场景纹理</li>
<li>动画文件</li>
</ol>
<p>图片最占用空间，动画文件比重虽然不低，但是压缩比高。图片打包时几乎是无法压缩的。<br>因此优化尺寸的重点就是在导入图片时设定正确的压缩格式。</p>
<h2 id="switch-platform-to-android">switch platform to android</h2><p>把build platform默认设置为android，因为unity为你自动转换压缩格式的时候，在android这块处理的并不好，有些方面需要自己去盯着。<br>ios因为硬件的一致性，统一使用PVRTC。<br>ETC1是android目前支持最广泛的压缩格式，和ios的压缩格式一样都是8:1。</p>
<h2 id="1024x1024">1024x1024</h2><p>纹理最大只用1024x1024。<br>更大尺寸的纹理？有些手机支持不了。<br>非方形纹理？无法使用最佳格式去压缩，只能采用失真高，压缩率低的格式。</p>
<p>总之，需要压缩的纹理必须是方形，分辨率限制在1024x1024以下。</p>
<h2 id="拼接和切割ui素材">拼接和切割UI素材</h2><p>UI素材的小元素很多，将多个素材拼接成一个1024大图有以下好处：</p>
<ol>
<li>减少drawcall，提高效率。 移动设备的极限差不多就100 drawcall吧，长时间太高会发烫。</li>
<li>减少图片数量，容易看到优化效果。</li>
<li>大图压缩后的失真程度非常小。</li>
</ol>
<p>为什么要切割呢，主要是有一些长背景素材，如2000x500，可以切成1024x500，再合并成1024x1024的方图进行压缩。<br>如果压缩后太失真，那就不切割，使用原图而不进行压缩，尺寸上也比1024x1024不压缩的小。<br>这需要权衡。</p>
<h2 id="压缩ui素材">压缩UI素材</h2><p>有时候UI素材压缩，会失真，需要尝试看效果是否选择压缩。<br>按钮，边框类的素材一般是不压缩的，因为压缩后容易失真。<br>但如背景类素材，布景类素材压缩后却和原图非常接近。</p>
<p>因为UI素材携带alpha通道，unity在转成android压缩格式时会使用rgba16，这是非常糟糕的压缩格式——低压缩比，高失真。<br>可手工指定android的压缩格式为ETC1，但是ETC1并不包含alpha数据。为了能够显示半透的元素，需要修改shader，传一张alpha通道的纹理进行混合。<br>alpha纹理不需要另外制作，将原图复制一份，设置导入格式为alpha8即可，导入尺寸尽可能缩小到256x256以内。</p>
<h2 id="压缩场景纹理">压缩场景纹理</h2><p>场景纹理总是选择压缩格式，全部都必须是方形的。<br>更重要的是，要避免alpha通道。如果包含了alpha通道，压缩格式手工改成ETC1，无需额外的alpha通道纹理。</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[ruby不成，成unity]]></title>
        <link href="life/201406-unity.html"/>
        <published>2014-06-08T16:00:00.000Z</published>
        <updated>2014-06-08T16:00:00.000Z</updated>
        <id>life/201406-unity.html</id>
        <content type="html" xml:base="" xml:lang="en">
            <![CDATA[ <h2 id="移动项目">移动项目</h2><p>已经完成ruby on rails的基本学习了，正打算找远程的工作，找到后就立刻离职。</p>
<p>一方面工作机会比较少，另一方面缺乏历史积累，估计别人也看不上。总之也不太好混了。</p>
<p>后来公司移动项目有同事离职，调整我过去救火，还表示不介意我将离职，总之要我帮忙挺一下。</p>
<p>鉴于我一下子走不了，还是好基友的项目，而且可以学习新内容，我就答应过去了。</p>
<p>项目用unity3d做的，我上手很快，写了一些战斗和动画相关的组件。</p>
<p>估计过几天闲了，会整理出一些可以复用的放到github上。注意可复用组件的积累，可以提高以后相同工作的效率。</p>
<p>现在是热情满满的，有时候会盼望着上班。小团队的效率和沟通就是高。</p>
<h2 id="租车">租车</h2><p>正好赶上端午节，被迫开了两天车出游。</p>
<p>太久没摸车了，并且没有提前去熟悉线路，一路上惊险不少。</p>
<p>这次开车的经验积累如下：</p>
<ul>
<li><p>验车一定要仔细，拍照。</p>
<blockquote>
<p>当时我租车的时候我就没怎么看车身，后来可能停车的时候被刮蹭了，多赔了200。
有些老刮痕甚至会留在保险杠最底下，一定要仔细检查。</p>
</blockquote>
</li>
<li><p>不熟悉线路一定要提前模拟导航，那些关键的岔路口尽可能用街景图看一下，做到心里大概有数。</p>
</li>
<li>北京的高速车很多，一公里出口处，最好提前靠右，即使有车排前面也慢慢跟着，不然容易错过出口。</li>
<li>减少饮水，尿急会影响注意力和判断力。我差点闯祸。</li>
</ul>
<h2 id="分享">分享</h2><ul>
<li><a href="http://mp.weixin.qq.com/s?__biz=MjM5NjAxOTU4MA==&amp;mid=250361370&amp;idx=1&amp;sn=eae8dd430645bd23305ed715f8e8d47a&amp;key=e60cf81314c277c737fa16c87755928f249a129d2e85a9e8de9d7dcb54604638475bfe17cd0617604887f435c687e61a&amp;ascene=1&amp;uin=MTYwNTc5">为何你的生活那么无趣</a></li>
</ul>
<p>兴趣就是用热情去挑战痛苦，然后获得成就。</p>
<ul>
<li><a href="http://coolshell.cn/articles/10910.html">分布式系统的事务处理</a></li>
</ul>
<p>要做分布式的数据和同步？这篇基础很值得一看。</p>
<ul>
<li><a href="http://daily.zhihu.com/story/2012184?utm_campaign=in_app_share&amp;utm_medium=iOS&amp;utm_source=copy">SEO？呵呵</a></li>
</ul>
<p>打点广告，然后好好服务用户吧。</p>
<ul>
<li><a href="http://jianshu.io/p/93c7b3e6af03">Getting Real</a></li>
</ul>
<p>我希望这个移动项目能迭代更快，更高效。</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[程序员的自我修养：reloc, PIC, dynsym and PLT]]></title>
        <link href="idea/reloc-pic.html"/>
        <published>2014-05-07T16:00:00.000Z</published>
        <updated>2014-05-07T16:00:00.000Z</updated>
        <id>idea/reloc-pic.html</id>
        <content type="html" xml:base="" xml:lang="en">
            <![CDATA[ <h2 id="什么是重定位">什么是重定位</h2><p>我们编译可执行程序的时候，调用的函数只有声明没有实现会出现编译错误。总之是要在编译期间解决的问题。</p>
<p>我们编译动态库的时候，调用的函数是可以没有实现的。那么加载动态库后如何正确的执行函数呢？毕竟编译期间根本没有解决这个函数符号。</p>
<p>编译时不解决，那就记录下来，留到以后解决吧。</p>
<p><code>objdump -C -R</code>会打印出未解决的符号，和符号被调用时候的地址。比如有个未解决符号是<code>f1</code>。</p>
<blockquote>
<p>0x80abcde4----------f1</p>
</blockquote>
<p>用<code>objdump -C -d</code>查看调用<code>f1</code>的代码，可能如下：</p>
<blockquote>
<p>0x80abcde0-----call 0x80abcde4</p>
</blockquote>
<p>执行到<em>0x80abcde0</em>，代码就是call后4个字节的内容，我们假设call指令占用4个字节的话。正好是<em>0x80abcde4</em>。我们等着<em>0x80abcde4</em>被填上<code>f1</code>的真正地址。</p>
<p>程序启动后，会记录他所加载的符号和符号地址，无论是来自可执行文件还是动态链接库。</p>
<p>当它加载到那个还没有解决<code>f1</code>符号的动态链接库的时候，程序会尝试从所记录的符号表中查找<code>f1</code>，如果能找到，嗯，就把动态链接库中所有调用<code>f1</code>的位置都填上正确的值。比如<em>0x80abcde4</em>。</p>
<p>我所说的只是重定位中的一种，称为动态链接。实际上静态链接的时候也有重定位过程。</p>
<h2 id="什么是pic">什么是PIC</h2><p>PIC是地址无关代码，由gcc编译时指定选项<code>-fPIC</code>开启。</p>
<p>首先说什么是地址相关代码，当程序调用函数<code>f1</code>的时候，实际汇编代码是这样的：</p>
<blockquote>
<p><code>call 0x80abcde4</code></p>
</blockquote>
<p>这个<em>0x80abcde4</em>就是<code>f1</code>的函数绝对地址。</p>
<p>为了调用<code>f1</code>而将它的绝对地址编译到调用中的做法，叫做地址相关代码。</p>
<p>地址无关代码恰好相反，编译器增加一个符号<code>f1_ptr</code>，存储函数地址。实际上是等价于增加了指向函数地址的全局指针变量。</p>
<p>那么调用<code>f1</code>的时候，是这么调用的：</p>
<blockquote>
<p><code>call *(0x80123456)</code></p>
</blockquote>
<p><em>0x80123456</em>是<code>f1_ptr</code>的地址，存储的是<code>f1</code>的函数绝对地址值。这个值在程序运行期间是可以修改的，那么调用的时候实际就跟<code>f1</code>的绝对地址无关了。</p>
<p><code>f1_ptr</code>的地址是相对的，这就是地址无关代码。</p>
<p>当然编译器并没有真的增加一个名称是<code>f1_ptr</code>的符号，但确实增加了一个匿名全局变量，保存<code>f1</code>的函数地址，重定位的时候，只需要修改这个变量值。</p>
<h2 id="地址无关代码的收益">地址无关代码的收益</h2><p>当程序要为某个动态库重定位未解决的符号的时候，如果是地址相关代码，那么重定位需要修改动态库的代码。</p>
<p>若有多个程序同时使用这个动态库，系统不得不加载多份代码到内存中，因为每一份代码都要被修改。</p>
<p>地址无关的动态库在共享方面则不会有这个问题，系统只加载一份代码，每个程序都有一份<code>f1_ptr</code>变量，修改这份变量同样达到重定位的效果。</p>
<h2 id="什么是导出符号">什么是导出符号</h2><p>重定位过程中提到程序会记录所加载的符号和符号地址。那么什么符号才会被记录呢？是整个程序所有的符号吗？</p>
<p>符号是导出符号的超集，符号记录在<code>.sym</code>中，导出符号记录在<code>.dynsmy</code>中。只有导出符号才能用来供重定位过程查找。</p>
<p>可以通过<code>objdump -C -T</code>查看动态符号。</p>
<p>程序启动后，首先加载自身的导出符号，然后挨个加载动态库的导出符号，然后用链表串联起来。</p>
<p>重定位查找一个符号的时候，从链表头开始查找，第一次找到符号为止。因此即使后面的模块有定义这个符号，也等价于被隐藏起来了。</p>
<h2 id="总是重定位，总是导出符号">总是重定位，总是导出符号</h2><p>事实上，动态链接库不仅仅需要重定位未解决的符号，他把所有调用过函数都编译成重定位的形式。这就形成了很有趣的用法，比如替换分配器，测试和性能收集。</p>
<p>动态链接库只导出他自身实现的符号，而可执行文件则不导出符号。</p>
<p>gcc编译时指定<code>-rdynamic</code>选项，可执行文件会导出所有他自身以及静态库所实现的符号。这样可执行程序本身就可以为它所依赖的动态链接库本身提供实现，真是挺奇葩的。</p>
<h2 id="什么是plt">什么是PLT</h2><p>PTL是<code>.plt</code>段，用来在重定位过程中对符号的真实地址进行惰性求值。仅限于PIC代码。</p>
<p>因为动态链接库将所有调用的函数都编译成重定位的形式，数量十分巨大。如果程序在加载动态链接库的时候就重定位所有符号，比较耗时间。</p>
<p>因此第一次调用的时候才去查找符号的绝对地址就比较划算。实际上PIC代码调用一个函数的时候，并不像上面所说的直接</p>
<blockquote>
<p>call *(f1_ptr)</p>
</blockquote>
<p>而是调用一个PLT函数</p>
<blockquote>
<p>call f1@plt</p>
</blockquote>
<p><code>f1@plt</code>的第一条指令是</p>
<blockquote>
<p>jmp f1_ptr</p>
</blockquote>
<p>但<code>f1_ptr</code>的默认值是<code>f1@plt</code>的第二条指令，因此继续执行下一条指令，这条指令就是去重定位<code>f1</code>符号，填写到<code>f1_ptr</code>中。</p>
<p>调用一次后，<code>f1_ptr</code>就存储了<code>f1</code>的绝对地址，不需要再次重定位了。</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[git rebase 实践]]></title>
        <link href="idea/git-rebase.html"/>
        <published>2014-04-28T16:00:00.000Z</published>
        <updated>2014-04-28T16:00:00.000Z</updated>
        <id>idea/git-rebase.html</id>
        <content type="html" xml:base="" xml:lang="en">
            <![CDATA[ <p>rebase可以这么理解，之前创建分支后做了很多提交，现在尝试根据最新的主干重新创建分支，然后提交相同的内容。
这么做的好处是，保持主干提交的连贯性，方便其他人进行merge。</p>
<p>ladder-web拥有两个分支：</p>
<ol>
<li>master</li>
<li>create-pac</li>
</ol>
<p>现在的任务是将<em>create-pac</em>分支rebase后，merge到<em>master</em>并提交。</p>
<p>首先确保<em>master</em>分支最新：
<code>git checkout master</code>
<code>git fetch</code>
<code>git merge origin/master</code></p>
<p>然后开始rebase：
<code>git checkout create-pac</code>
<code>git rebase master</code></p>
<p>在这里我遇上了好几次冲突，主要是db/schema.rb的。因为我知道schema可以重新生成，所以当时选择了<em>rebase --skip</em>。
我以为skip是忽略冲突的意思，没想到结果是直接放弃了这个提交，导致rebase完成后，缺少了好几个文件，测试也无法通过。</p>
<p>麻烦大了，怎么修复？祭出reset神器。
<code>git reflog</code>
<code>git reset HEAD@{10}</code>
<code>git clean -df</code></p>
<p>reflog指令是查看git的提交记录，找到rebase开始前的那个节点，然后将HEAD指针reset回去。
reset后，工作目录下可能会残留一些rebase加进来的unchecked文件，用clean指令删除。</p>
<p>从这个问题学到两点：</p>
<ol>
<li>rebase处理冲突的时候，不要使用skip，除非真的无法解决冲突</li>
<li>db/schema.rb不需要加入版本管理，完全可以重新生成</li>
</ol>
<p>重新执行rebase指令，解决所有冲突后，成功。然后需要跑测试校验一下：
<code>rake db:drop</code>
<code>rake db:migrate</code>
<code>rake test:prepare</code>
<code>rake spec</code></p>
<p>最后merge到主干并提交
<code>git checkout master</code>
<code>git merge create-pac</code>
<code>git branch -d create-pac</code>
<code>git push</code></p>
<p>在merge到主干后，同样需要跑一次测试。</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[游戏的自动化测试]]></title>
        <link href="idea/game-autotest.html"/>
        <published>2014-04-05T16:00:00.000Z</published>
        <updated>2014-04-05T16:00:00.000Z</updated>
        <id>idea/game-autotest.html</id>
        <content type="html" xml:base="" xml:lang="en">
            <![CDATA[ <p>作为一个懒惰的程序员，要自动化一切，包括游戏测试。</p>
<p>游戏是一个复杂的CS系统，本身的数据流是二进制的，不像网页那样的文本制好解析；画面和UI是基于DX的，也就不能用一些测试通用窗口控件的工具去测试游戏。</p>
<p>我尝试过一些从各方面借鉴的做法。</p>
<p><strong>单元测试</strong></p>
<p>很多年以前，我在寻仙项目上尝试了单元测试。基本借鉴了《修改代码的艺术》一书，<a href="http://www.cppblog.com/darkdestiny/archive/2008/01/11/41001.html">对C++进行单元测试</a>。C++不同于脚本语言的动态性，mock的时候需要花费较多的精力，但进行单元测试是可行的。</p>
<p>我对服务器部分的一个组队模块部署了单元测试，但是接口和模块功能变化太频繁，很快就不再维护了。</p>
<p><strong>协议测试</strong></p>
<p>再一次的考虑自动化测试是在刀2项目。这一次依赖的是机器人工具和脚本，做了一个极简的客户端，让这个客户端可以通过脚本登陆、退出和收发所有消息，然后在脚本中定制测试流程。</p>
<p>这套工具听着蛮不错的，至少能测试服务器真实的交互流程，QA也用过一段时间，用来测压力和刷怪。但说到测试某个子模块，却一直未能成形。</p>
<p>其实还是老问题，通信协议太容易变化了。今天这个子模块还好好的，明天可能就某个协议增加了字段或者调整了发送顺序，测试就挂了。</p>
<p>这样一来，调整太频繁，可用性就低了。</p>
<p><strong>rspec</strong></p>
<p>最近在学习ruby on rails，相应的也就接触到rspec测试，很快就有了灵感，觉得这可能是一个更靠谱的方向。</p>
<p>rspec把整个页面作为测试对象，通过填充和点击操作，验证页面刷新包含的目标字符串。页面其实就是DOM文本，前面说到游戏从里到外都是二进制的，视觉内容还真不是一般工具能检测和操作的。</p>
<p>虽然如此，但是灵感就从中抽象出来。UI模块虽然是私有的二进制数据集合，但实际上对我们而言就是一棵控件树，在客户端的脚本里，同样可以用类似rspec的方式去操作UI，并且检验结果。</p>
<p>为了降低功能的频繁调整而降低测试的可用性，测试脚本一定是要把UI当做黑盒，尽可能用稳定的接口。用类似rspec的语法写个测试游戏商城模块的例子：</p>
<pre>describe &#39;mall&#39; do
    click_button ui_main.w_main, &#39;商城&#39;
    wait 2, seconds

    assert ui_supermarket.w_win.visible
    assert { have_content ui_supermarket.w_win, &#39;圣甲精华&#39; }

    click_button ui_supermarket.w_win, &#39;购买&#39;, &#39;圣甲精华&#39; }
    assert ui_msgbox.w_win.visible

    fill ui_msgbox.w_win, &#39;数量&#39;, 1
    click_button ui_msgbox.w_win, &#39;购买&#39;
    wait 2, seconds

    assert { have_item(&#39;圣甲精华&#39;, 1) }
end</pre><p>测试的流程大体是打开商城界面，点击圣甲精华购买按钮，出现购买确认对话后，填充数量并发起购买，然后确认道具数量的变化。</p>
<p>虽说把UI当黑盒，但窗口的顶层控件作为参数会有利于测试加速。比如 <em>have_content</em> 就是在商城窗口中搜索圣甲精华文字，至于这个文字到底放在哪，则一层层的去搜索商城窗口的子控件去寻找了。</p>
<p>无视UI的布局细节，尽量从客户端本身的数据中，通过不易改变的名字去查找和验证，就不惧怕程序的频繁调整了。</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[内存分配释放跟踪]]></title>
        <link href="idea/memtrace.html"/>
        <published>2014-02-27T16:00:00.000Z</published>
        <updated>2014-02-27T16:00:00.000Z</updated>
        <id>idea/memtrace.html</id>
        <content type="html" xml:base="" xml:lang="en">
            <![CDATA[ <p>当程序出现类似内存泄露等内存不稳定的问题时，若无法从代码审核角度发现问题，则考虑跟踪内存的分配和释放。</p>
<p>从跟踪的数据中得到程序内存的使用分布情况，以及退出时没有释放的内存，可以推断出程序内存开销的热点，以及内存泄露位置，执行相应的改进。</p>
<h2 id="常规跟踪方法">常规跟踪方法</h2><p>linux下有跟踪内存泄露的工具，但工具操作和数据解读的不习惯，以及DIY内存跟踪的轻易性，实际的使用效果并不理想。</p>
<p>常规的跟踪方法一般是重载<code>operator new</code> <code>operator delete</code> ，使重载参数中包含文件名和行号，这样new/delete分配时会传递分配的文件位置。</p>
<p>在<code>operator new</code>实现中，为每块请求的内存多分配出一个item结构，item结构中记录这次分配的大小和文件位置。</p>
<p>等到<code>operator delete</code>回收内存时，将指针偏移一个item结构的位置，就能读到item中的信息。</p>
<p>通过统计所有的item信息，得出内存使用分布，以及泄露的内存。</p>
<blockquote>
<p><strong>常规跟踪方法的限制</strong>
<em>因为定义的 <code>operator new</code> <code>operator delete</code> 比标准方法增加了参数，需要定义new宏，并将new宏包含在每一个源文件中。</em></p>
</blockquote>
<h2 id="优化出新的跟踪方法">优化出新的跟踪方法</h2><p>新的方法仍然基于重载<code>operator new</code> <code>operator delete</code>，但是重载标准方法，不增加参数。那么如何记录每次分配的大小和文件位置呢？</p>
<p>我们预先定义好一个item元素的哈希表，key是一个整数。在 <code>operator new</code> 的实现里，调用系统接口 <code>backtrace</code> 获得分配内存的调用堆栈，计算这些堆栈的哈希key，然后将这些堆栈数据保存到哈希表的item元素中。调用堆栈等价于文件位置。</p>
<p>我们依旧需要为每块请求的内存多分配一个指针，指向item元素，以便在<code>operator delete</code> 的时候，修改item信息。</p>
<p>我们分析内存分布和泄露之前，需要取得程序的core。导出item信息中的堆栈值之后，通过在gdb中执行以下指令：
<code>info line * addr</code>
获得每个堆栈的代码文件位置。<em>addr</em> 是堆栈值。</p>
<p>gdb调试时，新方法比常规方法计算量更小，也更容易汇总和分类。也不需要被每个源文件包含，并能影响到每个静态库模块 <em>(动态库尚未确认)</em>。</p>
<p>此外，还可以应用的 <code>malloc_hook</code> 上，需要注意的是hook分配时，不能为每块请求的内存额外分配，管理方式与new不同，易引起崩溃。</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[unity4.3的2d技术要点]]></title>
        <link href="game-art/unity4.3.html"/>
        <published>2013-12-08T16:00:00.000Z</published>
        <updated>2013-12-08T16:00:00.000Z</updated>
        <id>game-art/unity4.3.html</id>
        <content type="html" xml:base="" xml:lang="en">
            <![CDATA[ <p>unity4.3的2d，是在3d中用正交投影实现的。投影不是重点，重点是增加了2d的物理组件，提供2d的碰撞和物理支持。</p>
<h2 id="场景分层">场景分层</h2><p>2d的场景构建讲究分层，不同的对象分布到不同的层中，方便管理。</p>
<p>一般说来分5层</p>
<ol>
<li>静态背景层。静态的远景，然后云，水，雾气等可以做一个缓慢的循环动画。</li>
<li>动态背景子物体。飞鸟，小动物，小植物等偶尔出现的对象，但是不和游戏交互。</li>
<li>静态前景层。和游戏发生实际交互的地面，墙和物体，是实际的关卡内容。这些物体一般要设定碰撞多边形和物理材质。</li>
<li>游戏对象层。玩家，怪物等活物。</li>
<li>UI层。界面和粒子等。</li>
</ol>
<p>要快速做原型，主要是集中力量做操作逻辑，前景层，游戏对象逻辑和粒子表现。</p>
<h2 id="动画技术">动画技术</h2><p><strong>骨骼动画编辑器</strong></p>
<p>unity4.3内置了2d骨骼动画编辑器，所谓骨骼动画就是子部件的移动缩放和旋转。内置的编辑器可以所见即所得的编辑角色的各种动画。</p>
<p>原始的精灵动画，也作为骨骼动画的一种特殊表现形式出现。</p>
<p><strong>动画融合</strong></p>
<p>为不同的两个动画同时播放提供基于权重的融合支持，比如一边跑一边开枪，可以是跑和开枪两个动画的融合。</p>
<p><strong>动画切换状态机</strong></p>
<p>以前从一个动画向下一个动画切换的时候，需要用代码详细控制。unity4.3内置动画状态编辑器，让动画切换规则可见，并且定义了一些基本的切换规则，可以无需代码实现动画的自动切换。</p>
<p>至于需要代码控制的切换，只需调用<code>SetTrigger</code>。</p>
<h2 id="其他">其他</h2><p><strong>UI控件</strong></p>
<p>GUITexture和GUIText</p>
<p><strong>声音</strong></p>
<p>AudioSource</p>
<p><strong>线程</strong></p>
<p>过一阵再做一件事情，可以用<code>SetDelay</code>，也可以用<code>StartCoroutine</code>。</p>
<p><strong>时间控制</strong></p>
<p>Time.timeScale</p>
<hr>
<p>相比之下，cocos2dx显得落后很多。落后的原因，我觉得差不多是两块：收益和技术。</p>
<p>感觉cocos2dx做引擎没能挣什么钱，靠的是前台的游戏养活。收益不足的话，怎么补充人员开发更丰富的工具呢。光靠开源代码，是没法和unity这种工具抗衡的。</p>
<p>另一块是技术。现有的开发者技术很强，但是收益不足的话，无法吸引更多技术强力的开发者进来，为cocos2dx提供更强的动力。</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[11月，很高兴买了iMac]]></title>
        <link href="life/201311-imac.html"/>
        <published>2013-11-23T16:00:00.000Z</published>
        <updated>2013-11-23T16:00:00.000Z</updated>
        <id>life/201311-imac.html</id>
        <content type="html" xml:base="" xml:lang="en">
            <![CDATA[ <h2 id="我买了21-5低配">我买了21.5低配</h2><p>几年前的老电脑，硬件渐渐不稳定，时不时程序崩溃，或者蓝屏。等到国行iMac上线，就买了一台。</p>
<p>看过很多吹捧osx的文章，说什么改变生活，GUI和控制台的完美结合，用过就不想用别的了等等。说实话，我觉得我花了9k但是没有感受得到9k的价值（<strong>我一边写文章一边改变了自己的想法(๑•́ ₃ •̀๑)</strong>）。</p>
<h3 id="mac优势">Mac优势</h3><p><strong>颜色很棒</strong> 。用过几个显示器，从来没有这么舒服和靓丽的颜色。</p>
<p><strong>terminal秒杀cmd</strong> 。外观很重要，每次用到cmd都想一头撞死。powershell已经很好看了，但是提权仍旧不方便。</p>
<p><strong>mission control很直观</strong> 。在win下切换任务，make me think think think，感觉很累。有了mission control，配合magic mouse，呼之则来。</p>
<p><strong>全屏focus</strong> 。帮助我集中注意力到当前任务上，算是一个喜欢的小特性吧。其他系统也有软件具有全屏功能，但并非系统原生。osx下的全屏配合magic mouse手势，切换到其他窗口非常方便。</p>
<p><strong>高效的图形驱动</strong> 。作为一个linux，显卡驱动程序的性能真不是盖的。</p>
<h3 id="没有9k价值">没有9k价值</h3><p>买iMac，我是冲着3件事去的</p>
<ol>
<li>xcode开发</li>
<li>外观良好的terminal，linux命令行</li>
<li>高效的图形性能</li>
</ol>
<p>入手后，和预期相差不少。我的意思是，用这个不菲价格，osx提供的方案还不够完美，其他系统能用更低的价格，提供类似甚至更好的方案。</p>
<p><strong>不是100%的linux命令行</strong> 。我现在用homebrew安装命令行程序，希望他能包含大部分我想用的模块。总有一种命令行只是这个系统下的一个客人的感觉，不太舒服。</p>
<p>windows下也有类似的程序<a href="https://github.com/lukesampson/scoop">scoop</a>，只是差在powershell缺乏提权和目录的非linux。</p>
<p><strong>GUI不比别人强</strong> 。magic mouse只能说很漂亮，mission control虽然windows下没有，但若通过touch pad使用windows，切换任务并不困难，手势操作胜过osx。</p>
<p>再有就是ubuntu unity简直是osx的copy，该抄的元素一个不少。若是说冲着osx“完美”的GUI，我觉得选择免费的ubuntu更实惠，反正大家都对网银没辙。而且ubuntu拥有100%的linux命令行。</p>
<p>我本来想说完全可以花60%甚至更少的钱配台式机，<em>i5，好显卡(linux驱动支持好)，8G内存，SSD硬盘</em>，运行ubuntu，图形性能接近甚至超过osx。</p>
<p>实际到京东配下来，价格并不算太优惠。而相比买入iMac所独占获得的</p>
<ul>
<li>一体机美观大方，没有凌乱的排线，配上蓝牙键盘和magic mouse，还有比这更干净的桌面么</li>
<li>超棒的显示器，卓越的图形性能，鲜艳的颜色</li>
<li>xcode</li>
<li>静音低耗。我暂时没听到过它发出任何机械声，相比我的老台式机和笔记本，总能听到疯狂的风扇声。待机的时候才30w，而且唤醒是实时的，跟MBA/MBP一样。</li>
</ul>
<h2 id="分享">分享</h2><ul>
<li><a href="http://drops.wooyun.org/tips/734">通过nginx配置文件抵御攻击</a></li>
</ul>
<p>涨姿势了，一般的防御也是这个套路。</p>
<ul>
<li><a href="http://webappsecuritylab.com/?p=6">防御XSS的七条原则</a></li>
</ul>
<p>我觉得知道“不要在页面中插入任何不可信数据”就够了。</p>
<ul>
<li><a href="http://ruby-china.org/topics/14005">Web 中文字体应用指南</a></li>
</ul>
<p>一劳永逸，放弃思考，直接取用。</p>
<ul>
<li><a href="http://www.guifabu.com/?p=8662">斯坦福的一堂赌博课</a></li>
</ul>
<p>企业应奖励那些优秀决策而非优秀的结果。</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[创业就是卖出去]]></title>
        <link href="idea/marketing.html"/>
        <published>2013-11-20T16:00:00.000Z</published>
        <updated>2013-11-20T16:00:00.000Z</updated>
        <id>idea/marketing.html</id>
        <content type="html" xml:base="" xml:lang="en">
            <![CDATA[ <p>我做了两个月<a href="http://ppt99.sinaapp.com/">快乐上网</a>的回顾。</p>
<p>这个项目不太上台面，但是所经历的，和现在许多真正创业的朋友所经历的并没有多少区别，是我一笔重要的经验。</p>
<p>说下现状，业余，运营成本100/月，截至目前为止收入30。</p>
<h2 id="首先，你要有心灵鸡汤">首先，你要有心灵鸡汤</h2><p>这是我第一次尝试去做技术以外的事情，经历各种初级错误，入不敷出的运营。</p>
<ul>
<li>《黑客与画家》，财富是提供别人需要的东西；</li>
<li>《重来》，随时可以行动；</li>
<li>《精益创业》，听取反馈，不要浪费成本；</li>
</ul>
<p>一个idea要落到地面的第一步是有产品，并且这个产品有人需要。我更喜欢的一句话是</p>
<blockquote>
<p>虽然我们是卖钻孔机的，但实际上我们的用户只是需要墙上有个孔。</p>
</blockquote>
<p>有了idea，就行动作出产品，有了产品接着行动获得用户，有了用户就尽量取得用户的反馈，并依据修改。在这过程中，最重要的事情就是不要浪费成本。</p>
<p>自从做快乐上网，我开始注意其他创业者的消息，特别是个人创业者。一个idea做不好可能有多方面的原因，但是过早的高额硬件成本，会严重挫伤士气。每个月花的越少，就能坚持越长时间，有更多的次数根据用户的意见转型新的尝试。</p>
<p>每个月花的越少，越容易从一点点的用户收入中获得收支平衡，以后即使放弃了，也能让项目自我运行下去。</p>
<p>所以我把网站放在了几乎免费的SAE上，域名也无所谓，只在代理服务器上投入成本。</p>
<p>有了决定，趁热打铁，马上将产品粗糙的开发出来，然后一边推广一边改进。不要害怕太粗糙被嘲笑，一个是用户基本没有，另一个是有人肯笑你好反省哪里做错了。</p>
<p>接下来将按以下几块交叉说明：</p>
<ol>
<li><a href="/idea/marketing-web.html">网站改进</a></li>
<li><a href="/idea/marketing-how.html">推广操作</a></li>
<li><a href="/idea/marketing-data.html">数据统计</a></li>
<li><a href="/idea/marketing-proxy.html">业务改进</a></li>
<li><a href="/idea/marketing-seo.html">SEO规划</a></li>
</ol>
]]>
        </content>
    </entry>
</feed>