<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Magic ABC</title>
    <link href="feed.xml" rel="self" />
    <link href="" />
    <id>feed.xml</id>
    <entry>
        <title type="html"><![CDATA[我如何选择学习的新技能]]></title>
        <link href="idea/select-skill.html"/>
        <published>2017-10-06T00:00:00.000Z</published>
        <updated>2017-10-06T00:00:00.000Z</updated>
        <id>idea/select-skill.html</id>
        <content type="html" xml:base="" xml:lang="en">
            <![CDATA[ <p>生活的重点是什么？自己挣很多钱。<br>为什么要自己挣很多钱？因为不够花。首先，必须要上班，做不够有趣的，甚至没有成长的事情。其次没有足够的时间和预算，去体验想看的风景。最后，没有足够的预算，享受好的生活品质。<br>自己挣钱的方式，用现在热门的说法，就要熟悉几种有效的技能，可以变现的技能。</p>
<p>有些技能是协力技能，即使掌握了，也很难一个人生产出成品，产生经济效益。比如人工智能，自动驾驶，无人机，你会这个可以进大企业、大平台，非常吃香，但是自己一个人无法具备足够的资金和资源做出成品。<br>如果你是进入社会早期，或者打算依靠企业和平台积累收入，那学得越多越专，收入越高，顶尖者几年赚个几百万不是事。<br>现在的我不太适合这种方式，我已经回到了2、3线城市，并没有这么高要求的职位和薪资。对我而言，这种技能短期是非常难变现的，长期则取决于是否重新回到大城市的企业中去，也许有一天我又回去了。</p>
<p>有些技能是独立技能，掌握后一个人也可以创造产出，但是每次产出不容易重复出售，也就是无法“把自己同一段时间重复销售很多很多次”。如美术制作，模型和素材常常根据客户要求进行制作，很难适配另一个客户的要求。这导致我们需要不停的生产以获得收入，类似上班。<br>重复销售对增加收入是一件非常重要的要素，如果可以简单的走量，就意味着规模化和批量化。什么是简单的走量？复制就是最简单的走量。只要有工具能对这种不容易重复出售的技能进行改进，增加复用的方式，就能立即增加收入。  </p>
<p>软件是一种可以重复出售的产品，但2B软件来源于业务场景，常见的现象是懂技术的不懂业务，懂业务的讲不清需求。2C软件则是每种品类下候选软件太多了。两种软件做出来以后，还需要拼关系，拼运营。<br>我做2B软件就是懂技术不懂业务，而做2C软件则找不到可以做的内容。</p>
<p>做生意则是另一种挣钱方式，一门生意取决于三条腿：产品，口碑，流量。  </p>
<ul>
<li>产品是生意的开始，一手交钱一手交货。有没有好的货源，分店能不能简单的复制，这些是重点。  </li>
<li>口碑可以塑造，服务好，体验好，产品好，客户就乐意重复购买。  </li>
<li>流量则是店门前来来往往的人，取决于地段、直通车，以及目标客户群比例。</li>
</ul>
<p>找到好货源，估算流量，测算营收，好好培养团队塑造口碑，复制分店，就能盈利。  </p>
<p>我虽然这么说，不过我还没有找到我的好货源。</p>
<p>最后一项技能是内容创作技能，就是现在的小说，漫画，公众号，知识网红，小视频使用的技能。这项技能的产品数量巨大，市场充满了竞争，但是是最容易重复出售的产品。产品有直接变现的，也有间接变现的，直接变现的方式如购买和会员，间接变现的方式则是广告和代销。  </p>
<p>我打算选一门独立技能和内容创作技能进行学习，实现自己创造产出，并且可以重复出售。独立技能选择做网站模板，内容创作技能选择短视频。至于协力技能暂时先不考虑了，主要理由是短期还没有计划回到北上广，那学的技能就没有太多实际锻炼的机会，学而不用则废。</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[人生只是幸运]]></title>
        <link href="idea/justlucky.html"/>
        <published>2017-08-03T00:00:00.000Z</published>
        <updated>2017-08-03T00:00:00.000Z</updated>
        <id>idea/justlucky.html</id>
        <content type="html" xml:base="" xml:lang="en">
            <![CDATA[ <p>已经进入8月了，股票净值1.2，我检查了一下交易，发现年初所选的所有股票，最终都没有好结果。</p>
<p>有好几支跌破10%，进行了止损。另外几支则经历了上涨，最多浮盈10%，然后慢慢的又跌回起点。期间追涨的老板电器和信立泰，同样浪起浪跌，最高浮盈10%，现在也进入亏损状态即将止损。<br>神奇公式还不够神奇，里面布满了坑。</p>
<p>如果没有运气，今年的盈利估计和货基差不多。所幸买中了腾讯和美的，并且逐步加仓，目前获得了较多的浮盈。</p>
<p>不同的年龄能体会到不同的道理，最近一直思量的就是，人生在起点附近波动，能飞越的要靠运气。一生能获得一次运气，就足此生，此后小心的通过低风险盈利，就能持久。<br>就怕那种自负的自以为是，以为下一把依旧可以成功的，总是有打脸的时候。看过集思录上的一些没落的故事，一夜之间未来的目标不过是昨日的起点。</p>
<h2 id="从中的体会">从中的体会</h2><ol>
<li><p>鸡蛋不要放一个篮子，在不明朗以前，要给自己试错的机会。</p>
</li>
<li><p>要设置每轮的总止损6%，每一支投入的止损10%。限制N支投入的总止损为6%，即限制鸡蛋数量为N。</p>
</li>
<li><p>每当浮盈10%，可增加新一支的投入。浮盈股不能盈利则止损，新股止损点10%，保持总止损6%。</p>
</li>
<li><p>布局稳定后，单支浮盈10%即可卖出50%~100%落袋，等待曲线的回落。</p>
</li>
<li><p>选股，选有趋势的，神奇公式里挑的都是好东西，不要怕有趋势的价格高那么一点点。你的止损规则放在那里，能有很多次机会。</p>
</li>
<li><p>选股，没有趋势的，肯定还会找机会在跌10%，所以有耐心慢慢等，等再跌5%的时候入手，一年很长，以一年来衡量成绩，机会总会有的。</p>
</li>
<li><p>自己技术还太差，不能帮别人理财。</p>
</li>
</ol>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[RESTful设计规则]]></title>
        <link href="idea/restful.html"/>
        <published>2017-05-25T00:00:00.000Z</published>
        <updated>2017-05-25T00:00:00.000Z</updated>
        <id>idea/restful.html</id>
        <content type="html" xml:base="" xml:lang="en">
            <![CDATA[ <p>已经有无数人写过类似的内容，基本内容也都差不多，这次我写点少数人写过的。</p>
<h2 id="基本规则：以资源为视角，固定操作方式">基本规则：以资源为视角，固定操作方式</h2><blockquote>
<p>GET /books   #获取书目</p>
<p>GET /books/1  #获取某本书详情</p>
<p>GET /books/new  #显示添加新书的表单</p>
<p>POST /books  #添加新书</p>
<p>GET /books/1/edit  #显示编辑某本书的表单</p>
<p>PUT /books/1  #更新某本书</p>
<p>DELETE /books/1  #删除某本书</p>
</blockquote>
<p>以上内容来自rails，也常常是大家写过无数遍的内容，对URL以资源的视角进行观察，每种资源都有其固定的URL模式，以模式映射对资源的固有操作方法。多数人的文章可能就收尾了，这个规则太简单，但现实世界更复杂一点，真实用户会碰上这个规则无法解决的冲突。</p>
<h2 id="子资源">子资源</h2><p>子资源如同书和评论的类比，每本书都有自己的评论，评论作为一种资源从属于书。虽然可以把子资源提升为顶层资源，但肯定不是指的提倡的做法。</p>
<blockquote>
<p>/books/1/comments</p>
<p>/books/1/comments/c1
子资源以 主资源+id+子资源+[子资源id] 的形式构造URL，以达到快速获取某主资源下子资源的目的。</p>
</blockquote>
<h2 id="资源非标准行为">资源非标准行为</h2><p>虽然标准的增删查改能覆盖绝大部分资源操作需求，但是总有一些时候，资源有特别的操作，或者是你想给资源的某个小操作赋予一个更有意义的名字，如对一本书进行 LIKE 操作。</p>
<p>把 LIKE 抽象成 likes 子资源是无意义的，这是一个操作行为，同时这个行为是针对用户资源而不是书这个资源。但我们可以把这个行为使用子资源的形式构建URL。</p>
<blockquote>
<p>POST /books/1/like
这确实是参考了子资源的URL，能 work， 但是和子资源有语义冲突，我们应该想想更好的做法。</p>
</blockquote>
<p>再从新想想非标准行为这个点：LIKE 是一个行为，可以抽象为一个资源，但是这个资源并不能归结成为子资源，但是如果是顶级资源的话，又不能算作纯粹的资源，如  /likes 这个顶级路径就很怪异。重要的是，他是和书相关的。</p>
<p>POST  /books/like/1
我们可以给这个顶级路径增加一个 namespace 来构建URL，既能区别于子资源模式，又能表达和书的相关性。</p>
<h2 id="资源子集操作行为">资源子集操作行为</h2><p>最后讲讲资源子集操作，实际上是某个顶级资源的集体对象的新的表现形式，或者批量修改操作。比如我想对图书资源再分别增加一个获取热门书目URL，一个搜索URL，类似这种获取资源子集的操作，应该怎么构建URL呢？</p>
<p>通过查询参数的方式来指定获取的资源子集，这有两个不足。第一，增加了controller的复杂性，里面的实现要 ifelse。第二，URL格式不好，我们就是想给URL起个好听一点的名字。</p>
<blockquote>
<p>GET /books/hot</p>
<p>GET /books/search
这个模式其实不错，可读性和关联性都有了，但是有点和读取某本书详情的URL相冲突。</p>
</blockquote>
<p>我觉得将子集查询抽象为新的只读资源可能更好，包括在controller的结构上。</p>
<blockquote>
<p>GET /hot</p>
<p>GET /hot-books</p>
<p>GET /search</p>
</blockquote>
<h2 id="url不是重点，重点是controller要完全符合第1条规则">URL不是重点，重点是controller要完全符合第1条规则</h2><p>我们不会在一个资源的controller上添加除了增删查改以外的任何方法，拿rails来讲也就是</p>
<p>index</p>
<p>show(id)</p>
<p>create</p>
<p>update(id)</p>
<p>delete(id)
所以当我想通过controller给资源增加非标准行为或者资源子集操作行为的时候，不管URL最后如何设计，我都会把这个行为抽象到一个新的controller中，让这个controller符合第1条规则。</p>
<p>controller严格符合规则的好处是，程序接口统一，框架能够在这个统一的框架下提供更好的支持。</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[大家在做什么]]></title>
        <link href="idea/ideas.html"/>
        <published>2017-05-11T00:00:00.000Z</published>
        <updated>2017-05-11T00:00:00.000Z</updated>
        <id>idea/ideas.html</id>
        <content type="html" xml:base="" xml:lang="en">
            <![CDATA[ <h2 id="1-数字营销">1. 数字营销</h2><p>通过技术手段识别用户当前信息和状态，然后推送实时性较强的广告和促销，涵盖线上和线下人群。</p>
<p>数字营销的方案和工具，能让商户在竞争中增加获客数量。</p>
<h2 id="2-内容传媒">2. 内容传媒</h2><p>视频，图片，文字的优质内容，呈现到客户面前，首先以广告形式获利。</p>
<p>随后客户被内容所吸引，对提到的物品产生拥有欲望，可在此基础上推出购买链接。或者，进一步推出高级的付费内容项目。</p>
<h2 id="3-单品设计销售">3. 单品设计销售</h2><p>具有美感，设计能力，设计某种生活用品的优质单品，委托代工生产，然后进行营销和出售。</p>
<h2 id="4-自动化技术升级">4. 自动化技术升级</h2><p>随着自动驾驶和各种智能设备的普及，利用现有硬件研发机械和机具的自动化控制器，改造传统的人力操作设备，提高生产效率，节约成本。</p>
<h2 id="5-通信服务，数据服务，软件服务">5. 通信服务，数据服务，软件服务</h2><p>短信接口，电话接口，验证码接口，社会数据查询，在线HR，在线进销存等等。</p>
<h2 id="6-物品租赁">6. 物品租赁</h2><p>家具，汽车等大件物品的租赁，以租代购等等。物品的租赁市场本身依赖另一个活跃的租赁市场，如家具租赁依赖于房屋出租。</p>
<h2 id="7-中间人信贷金融">7. 中间人信贷金融</h2><p>居间者，可以展开信贷金融行为，为付款者一方提供分期付款，为收款者一方提供合约贴现。</p>
<h2 id="8-资源整合，提供一键实施方案">8. 资源整合，提供一键实施方案</h2><p>如家装行业，提供各种局部装修一到两个固定方案，优化施工资源，降低成本。</p>
<p>其中可细分为 物质非物质生产，技术提升效率， 基础设施工具， 金融， 资源整合优化， 二手处理、短期租赁。其中技术提升效率主要用在提升劳动效率和营销效率，produce more, sale more。资源整合优化，可以看做是一种服务生产，打包式的优质服务。</p>
<hr>
<p>上面有6种生意都是一次设计多次出售，可以批量和规模化的好生意。</p>
<p>我们能不能做这样的生意？为什么不能？是因为我们知识太少，无法创造出产品，更不论有独立产品后的生产和销售了。</p>
<p>看到一个概念的时候先想想，这跟我有什么关系，这能变成大家做的生意中的一种么。</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[一天]]></title>
        <link href="idea/day.html"/>
        <published>2017-04-15T00:00:00.000Z</published>
        <updated>2017-04-15T00:00:00.000Z</updated>
        <id>idea/day.html</id>
        <content type="html" xml:base="" xml:lang="en">
            <![CDATA[ <p>早上睡到自然醒来，已经过了9点。简单洗漱后，到公园里慢跑热身，然后回家吃早餐。</p>
<p><br></p>
<p>打开交易软件，抓取数据进行量化分析，得出操作指令。一部分仓位已经按照长投策略进行部署，另一部分仓位则做短期量化操作。</p>
<p>又或者是，开始对今天的工作进行设计和分配，慢慢的做一件别人需要的东西。</p>
<p>工作做久都是枯燥的，不断重复的流程，没有新的体验和创意，只要运用已有的技术和经验就能进行搭建。</p>
<p>如最近看到的python实现的图像模仿软件，只是调用的话并没有太多难度。我更希望掌握的是算法背后的原理，以及映射到算法上的实现方式。掌握未知，突破舒适区才是最舒适的。</p>
<p><br></p>
<p>中午吃点肉食和蔬菜，饭后散步休息，小憩30分钟。</p>
<p>下午继续对今天的工作进行设计和分配。</p>
<p><br></p>
<p>差不多5点的时候，收拾工作，补充一些水和食物，到健身房锻炼一个多小时。</p>
<p>锻炼后，补充一些肉食和蔬菜。</p>
<p><br></p>
<p>晚上选择看看电影，或者看看书，11点之后睡觉。</p>
<p><strong>这是我希望的一天</strong></p>
<hr>
<p><br></p>
<p>实际上并不是这样的。</p>
<p>早上 7:40 起床，急急忙忙的洗漱并吃点，然后上班。</p>
<p><br></p>
<p>上班忙的时候，做两种事，一种是做完有结果的，另一种是通知、询问和等待，需要长期跟踪的。前者是开发工作，get things done is easy，后者则是沟通协调工作，不容易把握，也感觉推进很吃力。</p>
<p>我需要把握这种工作，找到关键点，虽然这样的任务实在没有什么意义。也许这个任务并不重要，在客户没有要求以前。每个人手上都有很多其他工作要做，客户和BOSS的关注才能让任务得以快速推进。</p>
<p>沟通协调工作的重点，首先明确谁是牵头，谁是协助。其次，明确如何向协助表达这个任务的优先级，并获得帮助。这种类型的工作我确实很陌生。</p>
<p><br></p>
<p>至于开发工作，其实也并没有让我感到舒适。充满限制的糟糕的内部开发工具，落后的AIX shell，缺失的核心接口文件说明，让新业务开发举步维艰。</p>
<p>在不忙的时候，则是看看网页，v2ex，开发头条，湾区日报，简书，基本上没有什么收获。</p>
<p><br></p>
<p>中午吃过午饭，去超市采购些食材，回家继续看看网页，然后午休30分钟。</p>
<p><br></p>
<p>下午上班如同上午，依旧是两种事情穿插进行。</p>
<p><br></p>
<p>一天下班后，回到家里开始做饭，吃饭，洗锅，然后还是看看网页，然而并不能看出个鸟来。</p>
<p><br></p>
<p>10:00 后，开始去洗澡，洗衣服。洗完澡出来可能躺倒床上去刷刷手机看看公众号，看看菜谱确认明天的采购。</p>
<p>睡觉。</p>
<p><strong>这也是你的一天。</strong></p>
<hr>
<p><br></p>
<p>为什么理想和现实之间有如此差异，首先是工作时间不自由，工作内容也是枯燥，并且充满不规范和落后带来的困难。虽然可以寻找一份工作流程更熟悉的工作，但这份工作是在当前这个区域能找到的收入最高的工作之一。</p>
<p>不能换工作，因为没有其他更有效的收入途径，而支出则很大。这个问题有两个解决方向，要么换一个更合适更流畅更先进的工作，收入仍旧是当前区域最高，要么从痛苦的工作之外做一份有意义的side project并获得额外收入。</p>
<p>概括来说，是要有更强的能力做更先进更有意义的事情，这个事情满足他人需求，我能从中获得足够的收入，尽量可持续发展。所以现在的问题就是，我没有更强的能力，并且我不知道他人的需求。</p>
<p><br></p>
<p>更强的能力只是一个解答题，很容易找到大道，而知道他人需求则是一个分析选择题，充满不确定。</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[TLS安全通信]]></title>
        <link href="idea/tls-tunnel.html"/>
        <published>2017-03-31T00:00:00.000Z</published>
        <updated>2017-03-31T00:00:00.000Z</updated>
        <id>idea/tls-tunnel.html</id>
        <content type="html" xml:base="" xml:lang="en">
            <![CDATA[ <h2 id="什么是tls">什么是TLS</h2><p>TLS其实是SSL，可能更正式的说法已经不用SSL了。TLS是一套基于非对称加密算法的安全传输协议，更严格来说，TLS先是通过非对称加密方式交换对称加密秘钥，然后采用对称加密算法进行安全传输。</p>
<p>非对称加密是这样的一把锁，有两把钥匙，任意一把钥匙可以把锁锁上，只有另一把钥匙才能将锁打开。这两把钥匙是成对的，可以互相解密。其中一把是公开的公钥，另一把是服务器持有的私钥。</p>
<p>任何人都可以用公钥加密一段消息发送给服务器，做到安全发送。另一方面，服务器可以用私钥加密一段消息，将消息明文和密文发送给接收者，以此证明自己的真实身份，这叫做签名。当然，现实中，是对消息的摘要进行签名加密，因为摘要比较小。</p>
<p><br></p>
<h2 id="证书和ca">证书和CA</h2><p>TLS的第一步，就是让发送者持有服务器的公钥。通常获得服务器公钥的方式，都是向服务器进行询问，然后由服务器明文发送过来的。为了保证这一步的安全性，确保明文发送过来的公钥没有被串改，我们又发明了证书。</p>
<p>证书由服务器名称信息和服务器公钥组成，然后加上证书签发机构CA和签发机构对前面信息的签名。改用证书机制后，服务器以明文发送自己的证书信息，使用者用CA的公钥验证证书签名，核对相关的服务器信息，然后就可以信任服务器的公钥了。</p>
<p>至于CA公钥的传递方式，一般是内置的或者通过实体进行传递。</p>
<p><br></p>
<h2 id="单向认证和双向认证">单向认证和双向认证</h2><p>一般服务器是不限制使用者访问的，所以服务器配置了证书和私钥，让发送者能够安全的从第一步开始建立加密通信机制。即使使用者不验证服务器证书，TLS仍旧是以加密方式进行，虽然安全度不是最高，但是屏蔽掉无聊的阿猫阿狗访问已经足够了。</p>
<p>更进一步，服务器可以配置双向认证，配置CA证书并要求认证使用者的证书。那么使用者在访问前就要配置由CA签发的个人证书和私钥，在第一步开始时把自己的证书和随机签名发过去让服务器进行认证。</p>
<p>使用双向认证的时候，通信的安全性已经足够高了：消息是加密的，并且不太容易在某个环节被串改，而使用者必须经过服务器用自己的CA签发授权证书后才能访问服务。</p>
<p><br></p>
<h2 id="平时如何运用tls">平时如何运用TLS</h2><p>TLS的运用其实应该非常广，只要不是内网服务，而是向不安全的互联网公开的服务，并且在通信上没有使用任何加密手段，也没有特别有效的客户鉴权，都应该使用TLS。</p>
<p>比如有时候因为某种原因，不得不向互联网暴露mysql，redis或者其他开源软件的服务端口，这种大作死的行为，软件自带的脆弱的客户鉴权机制就跟杂草一样一踩就倒，已经是业界人尽皆知的情形。</p>
<p>如果能为这些开放的服务端口加上TLS双向认证通信，基本能把侵害排除99%了吧。那如何给这些服务增加TLS安全通信呢？</p>
<p>首先，<strong>把公开的服务改成内网服务</strong>。</p>
<p>第二， <strong>在服务器和客户端之间配置TLS tunnel</strong> ，通过tunnel转发客户端和服务器之间流量。有很多TLS tunnel客户端可以使用，这种方式也不会对原系统造成任何改动，所谓各司其职。</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[人生最重要的事情]]></title>
        <link href="idea/important-things.html"/>
        <published>2017-03-28T00:00:00.000Z</published>
        <updated>2017-03-28T00:00:00.000Z</updated>
        <id>idea/important-things.html</id>
        <content type="html" xml:base="" xml:lang="en">
            <![CDATA[ <p>我是一名《通往财富自由之路》的订阅者，和鸡汤无关。我很久以前喝过一些鸡汤，懂得很多无聊的大道理，生活并没有和普罗大众有明显的不同。</p>
<p>其实和别人并没有什么关系，重要的是自己是不是开心，是不是充实，是不是自由。都不是，印证着那句话，谁的青春不迷茫，谁的中年不焦虑。</p>
<p>虽然天天看《通往财富自由之路》，我从来没有在专栏下留言，哪怕这周的主题是写作。不过我还是找个更好的地方写写，知乎和简书之间我选择了，嗯。。。</p>
<p><br><br></p>
<p>首先，我觉得人生最重要的事情是兴趣。</p>
<h2 id="1-不停的找到自己的兴趣">1. 不停的找到自己的兴趣</h2><p>做自己感兴趣的事情，自然就会开心，会充实。把感兴趣的事情做强，还有机会得到自由。</p>
<p>人做一件不感兴趣的事情，会遇到很多困难，心里上很容易放弃或破罐破摔，很难做得优秀，做得强人一等。</p>
<p>但找到兴趣，再动手学习，再进行创造和产出，也并非一帆风顺。作为一个普通人，我经历着重复的折磨与思考，动手做点事，放弃，猜猜自己想要的和想做的，然后重新动手做点事。</p>
<p>造成这种情况的唯一原因，就是不知道自己猜的对不对。我们的基因天然就是趋利避害的，如果大脑无法从所做的这件事及时得到重要的反馈，持续的做事对大脑而言就是浪费有限的生命资源，大脑自然就会让你在做事的时候体会到某种厌恶感，那么中途放弃的可能性就很高。</p>
<p>重要的反馈可以刺激大脑，激活精力，并克服疲劳感，可能是金钱，影响力，有趣等等。</p>
<p><br><br></p>
<p>拿我自己来说，我从2016下半年开始自学法律专业，打算试试最后一次司考。在此期间，从《法理学》开始学习，经过《民法总论》和《法硕联考分析》后，开始刷题，并穿插看看公众号和无讼，了解法律界到底是什么样子。这个阶段我是以知识求知欲作为对大脑的重要反馈。</p>
<p>我的猜想是，法律是一个在成熟社会调节关系的重要手段，在未来可见的时间里，越来越多的人会意识到法律，从而产生越来越多的法律使用需求。现在提前布局在此，是一种良好的准备。</p>
<p>但是很遗憾最近学习松懈，跟放弃差不多。随着我学习的深入，渐渐察觉到为了应试，不停的做题只是法条知识简单的重复叠加，十分单调。我的大脑已经无法从中得到重要的反馈，每次拿起题目都有一种排斥感，慢慢的就不看了。</p>
<p><br><br></p>
<p>另一件事，是我一直无法专注的去精进更深的程序开发技术。我是一个developer，7年，从做游戏开始，以兴趣为前提接触过很多东西，掌握的东西相当之广，同时觉得再去深入某个技术点也并没有太多困难。</p>
<p>但实际上我就是不想动手，因为我不知道猜的对不对，反正已经知道大概了，即使深入学习后现在用不上，则用进废退，也无法从中获取求知欲望的乐趣和满足感。所以，哪怕我一直在看《开发者头条》,仍旧没有任何深刻的精进。</p>
<p><br><br></p>
<p>另一件人生重要的事情，是珍惜自己的注意力。</p>
<h2 id="2-注意力是最宝贵的财富，合理使用">2. 注意力是最宝贵的财富，合理使用</h2><p>时间是有限的，并且无法收集和积累，所以珍贵。但时间是客观的，基于时间的注意力是主观的。</p>
<p>我们做的每一件事，都花费相应的注意力。这意味着，留给其他事情的注意力越来越少，同时当前这件事情的机会成本不仅仅是相应的注意力，还包括其他事情在时间顺序上还得往后拖延。</p>
<p>从互联网时代开始，注意力的争夺就愈演愈烈，特别是移动互联网完善后，大量的推送，小红点，推荐，不知不觉之间无情的收割着大量的注意力。</p>
<p>所以，尽量远离那些没有产出的活动，投入到有产出的兴趣中。</p>
<p><br><br></p>
<p>最后，跟普通人一样，颓废是容易的。在短期内，兴趣总是三分钟，注意力也更喜欢八卦。人生也如正态分布一半坐落在两边的低态。</p>
<h2 id="3-对曲折的人生保持长期的耐心">3. 对曲折的人生保持长期的耐心</h2><p>可能是从零几年开始，就听到大家说社会越来越浮躁，都想挣快钱，人生也一样。你找到了一个兴趣，然后投入了一阵子的注意力，基于某些原因你暂时放弃了这个兴趣。比如我前面提到的那些事情。</p>
<p>或者是本来你计划今晚好好看书，然后手机上一个推送过来，眼睛就没从屏幕上离开过。对大脑而言，不动脑的八卦比烧脑的分析和记忆愉悦多了。</p>
<p>其实很多时候都是和生物本能做斗争，生物的本能就是懒惰，安逸。这是绝望的一件事情，身为生物的人，怎么可能在和自身斗争的过程中常胜呢。就好像体内的两个小人，一个勤快小人，一个懒惰小人，故事嘛总之后来勤快的小人被懒惰的小人打死了。</p>
<p><br><br></p>
<p>另外，你是个努力的人，认真的生活，坚持兴趣，学有所成，也并不能保证生活会立刻带给你相应的物质回馈。努力的产出并不是物质财富的充分条件，生活也从来不准确的保证什么，就像法律和正义并不总是站在一块的。</p>
<p>但是，从长期看，每一个不甘心的人，总是在略微休息后重新拾取兴趣，慢慢的精进。而做强兴趣的价值，虽然在当下没有兑现出体面的价格，但却增加了在以后兑现的概率。</p>
<p>短期的表现不佳，令人气馁，保持对暂时失败的耐心和包容，才能在人生的起伏中一波一波的积累能量，不知哪一天站在潮头掀起巨浪。</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[一种务实的MVP策略]]></title>
        <link href="idea/mvpstep.html"/>
        <published>2017-01-22T00:00:00.000Z</published>
        <updated>2017-01-22T00:00:00.000Z</updated>
        <id>idea/mvpstep.html</id>
        <content type="html" xml:base="" xml:lang="en">
            <![CDATA[ <p>我曾经从网上阅读了一篇指导创业的文章，手把手的教人执行每一步，写得比较务实，值得找来仔细学习。<br>可是我忘记链接地址了，只能把自己曾经做过的笔记整理出来。</p>
<ol>
<li>首先你有一个创意，但是最好把这个创意叫做猜测guess，因为你并不清楚是不是有市场。</li>
<li>不要马上动手设计产品和写程序。</li>
<li>围绕你的猜测，定义痛点的起源，定义你的解决方案，定义你给用户带来的价值。用笔写下来。
简单说就是用户遇到什么问题，用户为什么用你的方案，用户为什么向你付费。</li>
<li>寻找20个渠道，每个渠道10人，他们都遇到了这样的问题，跟他们交流，看看他们如何解决这个问题。</li>
<li>进一步交流，问问他们是否愿意用你的解决方案，并为此付费。收集10到20个yes，如果数量不足，重复4，5步。</li>
<li>做一个landing page。元素就是你定义的问题，方法和价值，把他们整合成一个feature描述。最多花2天做出来，文字版本。</li>
<li>向广告商投小额预算广告，利用博客和论坛慢慢做软广。社交媒体广告比搜索广告强。</li>
<li>landing page要kpi，做到日均1000pv，并取得100个愿意付费的客户邮件作为launch list。如果不达标，就调整6，7步。</li>
<li>kpi达标后，一个月开发，专注核心特性，作出产品的0.1版。专注的意思是非必需功能都可以依靠客服和人工服务，包括支付，找回密码等等。</li>
</ol>
<p>原作者一针见血的重新定义了mvp：通过承诺实现最少的特性，制作一个landing page创造预售的1000块每月的收入。</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[2017 NEW]]></title>
        <link href="life/2017new.html"/>
        <published>2017-01-01T00:00:00.000Z</published>
        <updated>2017-01-01T00:00:00.000Z</updated>
        <id>life/2017new.html</id>
        <content type="html" xml:base="" xml:lang="en">
            <![CDATA[ <p>这篇2017的新篇章，挪到了2016最后一天书写。作为人人都干的年终总结，我也尝试总结一下我自己。</p>
<p>回顾今年的投资，获得的收益一般，勉强跟陆金所持平，真是心情起伏一年，还不如买6点的定期套死算了。收获是操作和判断逐渐熟练，自己的套路进一步完善；不足的是对行情和论坛的关注度不够，时间浪费在haha上而不是股票社区上。这样错失了一些机会和收益。17年希望积极关注，把吸取知识作为一种刚需。</p>
<ul>
<li><p>今年去了马尔代夫蜜月旅行，花钱果然是棒棒的，风景如照片一般，收获回忆；</p>
</li>
<li><p>离开桂林银行，进入兴业银行，工资提升，然后桂林银行也开始搞工资改革了我去。。。收获的是工资和一些商业、业务概念和见识，可能这些见识本身也可以通过阅读获得，但不如这样来的感受贴切，不足的是清闲，想想北上广做一份事情吃一口饭，滋味难说；</p>
</li>
<li><p>通过simple piano进行钢琴入门学习，收获指尖的愉悦，音乐竟然可以反复不厌倦的练习，就如为了达成完美反复玩同一个游戏一般，我想可能操作优秀的游戏玩家应该都是练习音乐的好苗子。不足的是由于其他更刚需的事情，终止了音乐的练习；</p>
</li>
<li><p>根据活在未来的观点，我选择了法律领域，启动了法律知识和业务的学习。对社会种种事件和关系，有了新的视角和感受；</p>
</li>
</ul>
<p>2016年初订立了一些<a href="http://hwh008.github.io/life/2016new.html">目的</a>，多阅读学习套利机会，做外包项目，深入做一个系统，结果都没有实现。其中一个原因是订立的目标都没有给出量化方式，也就没有真的说放在心上，因此这个年终无法评价自己。这是一个失败的地方，更可怕的是我竟然这么多年都对自己不负责任，好在现在明白过来，耐心和成长，就需要有逐步实现一些看似没有财富意义但实际有成长意义的目标，目标最终可以简单的量化评估。</p>
<p>2017年的3个指标：</p>
<ul>
<li><p>参加司考；</p>
</li>
<li><p>做30个模型和贴图，一周一个，到周即停；</p>
</li>
<li><p>考个项目经理资格证，上班时间复习；</p>
</li>
</ul>
<p>顺便没有量化的内容涉及一个，看看网红们怎么做到自我营销的。</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[房价的逻辑]]></title>
        <link href="idea/houseprice.html"/>
        <published>2016-10-25T00:00:00.000Z</published>
        <updated>2016-10-25T00:00:00.000Z</updated>
        <id>idea/houseprice.html</id>
        <content type="html" xml:base="" xml:lang="en">
            <![CDATA[ <p>我觉得我想明白了房价的逻辑，当然首先想明白了资产的逻辑。</p>
<p>先说资产的逻辑：<strong>价格=收益×PE</strong> 。</p>
<p>PE是市盈率，倒数是收益率，即价格除收益。理论上，PE和货币利率相关，银行理财收益能做到4% ~ 5%，那市场的PE应该是20倍到25倍。当市场看好某种资产，高估某种资产的时候，PE就高于25倍，意味着虽然看起来资产收益不如银行理财，但乐观预计的收益多半是比现在能明显算出来的多，超越银行理财的水平。如果没有乐观的预期，资产的PE是不可能长期走高的。</p>
<p>当某种资产的PE低于20倍的时候，意味着低估。若市场发现实际资产的风险低收益好，超过银行理财，资金会快速涌入，抬高PE，直到接近市场利率水平。</p>
<p>说说房价，上海张江500w的两居，月租5000，年收益6W，明面上算PE是100倍。这么高的PE，按理说傻瓜才会买呢，500W买理财年收益20W以上。但反过来想，如果市场真的认可这个房价，那说明实际PE应该不是100倍，应该是25倍到30倍的样子才对，哪怕存在高估。按这个设想和公式，则500W的房子的收益应该是16W到20W。多出来的10W收益是从哪来的呢？</p>
<blockquote>
<p>政策收益</p>
</blockquote>
<p>上海孩子入学分6档，1档户口+学区房，2档户口，3档学区房，其他3档基本没戏。如果在上海定居成家养孩子，那首要的孩子就学的政策收益，应该每年超过1OW吧，毕竟在上海10W的赞读费其实真的挺便宜的。</p>
<p>大城市欢迎一种人，高收入职业人群，高收入意味着高税收。最好他们还不消耗本地的社会资源，不生不养。其实年轻人、丁克人在北上广，如果可以高收入就业的话，生活非常滋润。</p>
<p>按这个逻辑怎么降房价呢？当然是降低收益了，增加出租房供应，降低流入人口，减少政策收益。比如出租房供应增加1倍，人口不变，相信房租年收益降至3W。上海学校增加1倍，入学收益是否可降至7W？这样算来房子年收益10W，房价可降至200W吧。</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[大数据-数据挖掘]]></title>
        <link href="idea/datamind.html"/>
        <published>2016-10-25T00:00:00.000Z</published>
        <updated>2016-10-25T00:00:00.000Z</updated>
        <id>idea/datamind.html</id>
        <content type="html" xml:base="" xml:lang="en">
            <![CDATA[ <p>最近在公司又重走了一趟数据挖掘路。打开Orange Dataming的网站，找到所有widget，逐个widget去看使用说明，并搜索其中的算法的大概思想。</p>
<p>其实起源是我突发奇想的想了解如何数据降维，增强数据的可读性。不停的搜索找到了PCA，进一步搜索PCA找到了以前用过的Orange，于是就尝试全面的看一次。</p>
<p>据说大数据分成这么几个方向，大数据收集，PB级。数据检索和统计，追求实时性。想基于大量数据进一步自动判断和测算，数据挖掘。让数据智能再牛逼一些，深度学习。</p>
<p>数据挖掘首先提供了一些方法，将多维数据以降维的形式展现，方便看清数据集的特性，然后基于数据集的特性进行分类，回归和聚类。看起来主要做自动判断和测算工作，并呈现这种工作成果。</p>
<p>分类是将一条多维的数据，标注为某一分类类型，进一步根据类型做后续操作，而不是看着大量数据干瞪眼。如图像识别，其中一种技术就可以用分类。</p>
<p>回归和分类类似，区别是将一条多维的数据，计算出某一结果值，这一结果值其实是分类的数值化表现，区别是分类结果是离散结果，回归是连续结果。</p>
<p>聚类则是在原始没有分类的情况下，通过用算法观察数据，查看数据集分块情况，来提出分类规划。</p>
<p>数据又分3种类型，对象直接属性数据；对象的子对象属性数据；对象基于时间的事件日志数据。这3种数据类型，都可以进行统计得到报表，但报表只是数据的汇总，如何得到关于对象未知的知识呢？数据挖掘。</p>
<p>我以前想做游戏外挂的数据挖掘，但以前基础差，没有想出思路，这次则想通了，通过玩家的事件日志数据，进行挖掘：</p>
<ol>
<li>尽量设想外挂常常发生的事件</li>
<li>将这些事件分别按角色按等级进行汇总统计，作为角色的属性</li>
<li>将统计到的所有角色和事件汇总属性，进行聚类分析，逐个验证可能的离群类或者离群点</li>
<li>重复1、2、3步骤，设计不同模型交叉验证</li>
</ol>
<p>如果这都找不出外挂角色的分类群，这也真是没救了。</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[最近过得有点点艰难的生活]]></title>
        <link href="life/20161024-weekly.html"/>
        <published>2016-10-24T00:00:00.000Z</published>
        <updated>2016-10-24T00:00:00.000Z</updated>
        <id>life/20161024-weekly.html</id>
        <content type="html" xml:base="" xml:lang="en">
            <![CDATA[ <p>入职银行一段时间了，下个月就可以拿全工资。这段时间闲得多，忙的少，主要负责GAFE, ATM等模块的维护，每天上班其实很闲，技术没有什么追求了。倒是和业务出去跑了几次，涨了很多见识：存量资金根据分类可以测算收入，银行的各种营销成本都是为了获得客户的存量资金。营销成本并不是贿赂，而是投入很实际的民生中，企业不愿为了部署民生设备掏钱，所以用新系统部署后的资金账户，换取银行方面的投资。</p>
<p>这段时间LP也从一份无法按时发工资，还需要长期出差的工作中离职了，离职后进入了找2套房的生活。从30W的一居室看起，然后到70多W的两居室，经历了南宁一号线的通车，一号线通车后地铁沿线的房价上涨几万。在9月的某天，我们终于打算买一套68W的两居的时候，来了一套特别好的通透的户型，但是SB的中介和毫无诚意的业主，让我们没有买到所谓的好房子，也错失了68W的那套。</p>
<p>我很生气总是坚持在某些看着不合适的事情，以及坚持在可以妥协变更方式的事情上，这些坚持一次都没有带来好的结果，却从来不试图修正自己。我很生气，我的内心一直很生气，我想起来就会生气。我此刻觉得累的有点想放弃了，很没劲。</p>
<p>另一件事情，我开始学习法律，法理基础已经看完，目前在看民法总论。看完法理学基础后，关于社会现象的有关看法，似乎默默的发生了某种变化，常常的想法就是，这事找律师啊，或者是，法律是公平，但朴素的正义感不是法律本身一直能具有的属性。恶法和不完善的法还是常态，但确实法律解释和判例在不断修正和进步。</p>
<p>我最近主要任务就是完成法律领域的学习，争取能考过司考和律考。</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[MVC, MVP, MVVM, Flux And Redux]]></title>
        <link href="idea/redux.html"/>
        <published>2016-07-21T00:00:00.000Z</published>
        <updated>2016-07-21T00:00:00.000Z</updated>
        <id>idea/redux.html</id>
        <content type="html" xml:base="" xml:lang="en">
            <![CDATA[ <p>界面架构的理念发展的很快，最近主要是由Web技术驱动的，Web技术真是一个日新月异的世界。</p>
<h2 id="mvc">MVC</h2><p>我真正认识MVC其实是从rails开始的，相见恨晚。以前的认识是建立在MFC上，那套框架只有view和model，当时我搞不清楚controller是什么东西。紧接着使用PHP，PHP真是简单粗暴，完全没听过所谓的MVC，整个网站都是硬写，减少了无关的包装和抽象，反而加深了Web基础的理解。</p>
<p>从使用rails开始，就真的明白了MVC原来不仅仅是理论，而是可触摸的。用view渲染出的页面，用户操作的request经过router分配到不同的controller，然后调用model进行业务逻辑，并取出model数值交给view渲染出新的界面。完全的如字面意思，而不需要再经过任何适应实际环境的调整。以至于后来我用其他框架的时候，都一定要套到rails的最佳实践和结构来。</p>
<h2 id="mvp">MVP</h2><p>Web技术沉默了一段时间，移动端崛起了，android, ios等系统开发，又有点回到MFC的老路子，在activity里用一堆的findviewbyid读取和更新控件，并进行业务逻辑。不过这次参与的聪明人比较多，这种糟乱的代码写多了app会爆，于是大家一合计，搞了个MVP，把一个view的所有子控件都封装起来，只有view对象对外提供接口设置相关的显示数据，控件上的操作事件，则交给present提供的接口进行处理，present做为一个中间层，隔离了view和model。</p>
<h2 id="mvvm">MVVM</h2><p>接下来进入单页应用时代，Web技术爆发开始了。很快的出现了angular和react巨头，基于databind的框架雨后春笋一般的冒出，甚至连移动端都出现了相应的创造，vuejs是我非常喜欢的一个。</p>
<p>MVVM的理论其实不是很完善，model和databind的数据出现一定的重叠，databind实在做得太好了，但并没有规定业务逻辑应该放置在何处，实际上简单的项目图痛快直接就放到viewmodel里了，不过稍微做大一些就会遇见很多问题，比如数据共享，一个数据更新可能引发多个界面更新等等，这些MVVM都没有给出广泛的标准。</p>
<h2 id="flux">Flux</h2><p>facebook就搞了个flux理论，去完善MVVM的坑。那flux是怎么回事呢？其实就是增加了一些中间层router，把数据的流动做到类似MVC的模式上去。用户操作产生事件后，生成一个request/action，经过router/dispatch分发给提前注册的controller函数，controller根据具体的action更新model/store后，产生一个通知，也是经过router调用相应的view更新函数。</p>
<p>这套体系中，通过router/dispatch和request/action，对view/viewmodel, controller和store进行了隔离，store沦为数据容器，controller全权负责更新。数据很明显的在单向流动，并形成一个环。</p>
<h2 id="redux">Redux</h2><p>很快有人进一步，在flux的基础上搞出一个redux，以函数编程中变量不变的基础，构造出一个store状态可以回溯的理论结构。</p>
<p>view(viewmodel)产生用户操作后，创建相应的action，action和对应的reducer函数树将会对store状态进行更新，更新后的store再通知所有viewmodel去更新显示。本质和flux差不多，但是通过2个关键点，带来了store状态的变化跟踪。</p>
<ol>
<li><p>以函数编程的方式更新store状态，即原状态不变，生成全新的状态对象</p>
<pre>newstate = fn(store.getState(), action)</pre></li>
<li><p>reducer函数就是controller函数，负责根据具体的action更新数据状态，用第1点的形式。reducer树是指，一个应用的状态数据，肯定是由多部分组成，每个部分都可以有专门负责这个部分的reducer，而每部分还可以再有子部分已经相应的reducer，这样就构建了一棵reducer树，对整个状态进行分治的更新，最后又逐级将新状态合并到一起。<br>这对应了controller的模块化。</p>
</li>
</ol>
<h2 id="总结">总结</h2><p>从MVC一路发展过来，本质并没有变化过，精髓上还是MVC。</p>
<p>view的本质就是展现，并且可以直接显示业务变量，无论是服务端的string render还是客户端的viewmodel(databind)，都是为了除去开发人员操作view细节做出的努力。</p>
<p>model一直是数据的承载，无论是包含逻辑的fat model或者是纯数据的thin model。</p>
<p>controller则一直是数据变更的入口，无论其只是简单的委托或者包含业务逻辑。若像redux那样做函数编程，则controller则是业务逻辑的本身。</p>
<p>而这个模式中的的上下承接者，虽然一直在模式LOGO上隐形，却十分重要的router/dispatch，则是一个action到controller的驱动形式。</p>
<blockquote>
<p>参考</p>
</blockquote>
<p><a href="https://segmentfault.com/a/1190000006016817">https://segmentfault.com/a/1190000006016817</a></p>
<p><a href="http://www.cnblogs.com/indream/p/3602348.html">http://www.cnblogs.com/indream/p/3602348.html</a></p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[周记2016-07-16]]></title>
        <link href="life/20160716.html"/>
        <published>2016-07-16T00:00:00.000Z</published>
        <updated>2016-07-16T00:00:00.000Z</updated>
        <id>life/20160716.html</id>
        <content type="html" xml:base="" xml:lang="en">
            <![CDATA[ <h2 id="离职，钱">离职，钱</h2><p>我从桂行离职了，入职兴业。原因很简单，就是钱的问题和其他问题，不过都是无聊的问题。下周一就去上班做做点事情了。</p>
<p>这周一离职以后，就一直是闲置在家里，想不出做什么事情，所以周一还是去上班吧。关于这件事情，我也确实没有什么更多可以描述的了。</p>
<h2 id="数据存储迁移">数据存储迁移</h2><p>dropbox实在被搞得太卡了，说实话墙真是啥都干，连我这个域名也被墙了，呵呵，真不知道这个域名发表了什么奇怪的言论。</p>
<p>迁移的方式很简单，整理了一下，一些不是非常保密的资料，就放到百度云上了。至于保密资料，则用bit sync在手机和电脑之间同步好了。</p>
<h2 id="jenkins发布blog">Jenkins发布blog</h2><p>趁着迁移数据的机会，我就不再把blog存档在云存储上了，这次放到了git coding.net上，然后在服务器搭建Jenkins，轮询coding上的变更，如果有变更，则在本地更新下来，用nico build出来，并自动上传到github page。</p>
<p>部署Jenkins花费了好几个小时，不过这是值得的，以后我就直接在coding上写blog并存储，然后工具链会自动发布到github page。</p>
<p>对于一个软件包推广部署这件事情，Java确实做得比其他的好，毕竟一般依赖都打进包里了。python没有一个处理依赖关系的仓库吗？</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[电子电路开发之殇]]></title>
        <link href="idea/electron.html"/>
        <published>2016-06-18T00:00:00.000Z</published>
        <updated>2016-06-18T00:00:00.000Z</updated>
        <id>idea/electron.html</id>
        <content type="html" xml:base="" xml:lang="en">
            <![CDATA[ <h2 id="熟悉基本电路图">熟悉基本电路图</h2><p>三极管驱动，上拉电阻，去耦电容等等基本的元电路图应该知道，并且知道单片机的IO口无法做功率驱动。</p>
<h2 id="电焊手工能力">电焊手工能力</h2><p>一般都是焊接2.x mm的间距，抽风买了1.x mm的，没这个手艺去焊接，来一块毁一块。</p>
<h2 id="单片机接口协议">单片机接口协议</h2><p>GPIO是最基本的，但是还需要了解IIC,UART,SPI,PWM，ADC等等电路接口协议。如果单片机没有包含相关协议的硬件实现，还要能用GPIO实现，或者买相关的协议硬件模块。</p>
<h2 id="模块手册">模块手册</h2><p>光有单片机也就能玩玩灯，真要做点有用途的事情，其他模块是不能省的，比如温度、湿度、RF和电机等等。单片机和其他模块命令和数据通信，是基于上节所说的接口协议进行。</p>
<p>每个模块有自己的特性和命令，还有自己的模式，操作起来就要找手册读一读。</p>
<p>通信方法一般是命令字 + 设置值，目前硬件方面的操控还是通过读写寄存器进行的，属于逻辑电路范畴。</p>
<h2 id="开发调试">开发调试</h2><p>好了，现在基本的知识都有了，画画电路草图，买些面包线和面包板，连接单片机、模块和相关元件。然后在不怎么样的IDE上写程序，烧录到IC，运行。</p>
<p>呵呵，板子怎么不按套路出牌。这时候有几种可能：</p>
<ol>
<li>代码问题，可能协议信号不太对啊。怎么办，可能要来个逻辑分析仪。</li>
<li>模块问题，可能被静电烧了。怎么办？可能得多买几个换着测吧。如果是RF的模块，估计还要抓信号来看吧。</li>
<li>代码运行过程怎么查？打日志呗，通过串口看，另外别买裸板，买开发板带一堆灯和LCD也能展示个过程。</li>
</ol>
<h2 id="pcb产品">PCB产品</h2><p>终于电路也通了，程序也通了，想产品化做小点。如果少量的话可能手工做更便宜点，买来洞洞板和原件，然后焊锡一个个焊好。</p>
<p>如果想再小点，就要设计PCB了，这个我还没学，因为已经对整个流程很烦躁了。设计好了PCB，淘宝找商家打板就好了。</p>
<h2 id="你感兴趣你搞定了，成本高，能做什么呢？">你感兴趣你搞定了，成本高，能做什么呢？</h2><p>你有想法，要做点实用的东西，而不仅仅是点个灯测个PM2.5m，比如像我那样打算做个水阀控制，屋顶的水位电路好做，怎么开关电机呢？买个wifi插座也能应付过去，wifi插座的怎么获得信号呢？还有水阀的开关电子阀门，拆装也是有工程量的。</p>
<p>算一算下来，真实施一套完善的系统，硬件成本就是许多，虽然STC、STM便宜，但是具备基本通信功能的NodeMCU售价20￥。另外设计上还要考虑停电、停网等预案。玩具是没有意义的，但是做得完善又各种成本太高。</p>
<p>也就是工厂搞无人车间，电气自动化，做单片机有价值，还有所谓的无线通信领域，这也是偏硬多一些。</p>
<p>至于现在的家庭智能硬件，只会搞搞万能遥控器，wifi开关。真正的家庭智能电器环境，应该是有大主机检测各个传感器状态，并根据客户的作息习惯，自动进行舒适、安全等方面的控制。现在这种什么硬件都wifi到云，通过手机操作和简单定时的方式真是太玩具了。并且各家都极其封闭，根本没有API方便第三方进行大主机的开发。</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[世界观]]></title>
        <link href="idea/worldview.html"/>
        <published>2016-06-17T00:00:00.000Z</published>
        <updated>2016-06-17T00:00:00.000Z</updated>
        <id>idea/worldview.html</id>
        <content type="html" xml:base="" xml:lang="en">
            <![CDATA[ <p><img src="http://i.imgur.com/AlF0N6k.png" alt="worldview"></p>
<p>四项工作领域，择一而入即可。要有好的收入，必须选时间杠杆高的，并且具备规模化效应。</p>
<p>好好的思考与等待吧。</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Excel 整合报表]]></title>
        <link href="idea/excel-join.html"/>
        <published>2016-05-08T00:00:00.000Z</published>
        <updated>2016-05-08T00:00:00.000Z</updated>
        <id>idea/excel-join.html</id>
        <content type="html" xml:base="" xml:lang="en">
            <![CDATA[ <p>我们常常需要从日志，数据库中取大量的数，这些记录常常是离散的，但业务需要将他们根据关键字合并，这项任务都有哪些做法呢？</p>
<ol>
<li>SQL join，不是一直都有这样的机会。</li>
<li>join，bash 的 join 命令。</li>
<li>写一段python 处理。</li>
<li>Excel处理。</li>
</ol>
<p>join操作或者join命令只能处理比较理想的情形，比如当join key缺失的时候，比如需要从多个key到不同列的尝试匹配。</p>
<p>在整合报表的时候，是一个反复尝试、预览的过程，这个时候命令行需要重复调整参数，并不比GUI更高效，不好调试，也容易遗漏。</p>
<p>Python是万能的，若每次遇到问题都从open,readline,split开始，不停的针对业务写脚本，并逐步抽取成一套工具集，为什么不直接 <strong>Find One</strong> 呢。</p>
<h2 id="excel很棒">Excel很棒</h2><p>Excel是非常棒的工具，除非要处理的是一个超大的表格。</p>
<p>Excel用于整合报表的函数主要是 <code>VLOOKUP</code> <code>LOOKUP</code>，且听我一一道来。</p>
<p>首先，我们的案例是sheet1 和 sheet2 通过 sheet3 连接，说人话大概是<strong>表1</strong>有关键字K1，数据KX，KY，<strong>表2</strong>有关键字K2，数据KX，KY，<strong>表3</strong>有K1、K2的关系。在这里通过K1,K2,KX,KY都不一定能在sheet1找到sheet2的对应。</p>
<p>以上是我之前处理的一个问题的简化，已经算复杂到不想用join了吧，每次写脚本呢又觉得很麻烦，其实看似问题清晰，但写程序的工作非常繁琐，涉及到搜索资料，调试排错，重构等等时间开销，一次性的开发，性价比并不高。</p>
<p>首先，在sheet1表通过<code>VLOOKUP</code>在sheet3查找K2：</p>
<pre>=VLOOKUP(K1, sheet3, index for K2)</pre><p>查找后，发现有些结果是<code>N/A</code>，这就需要在sheet1借助KX, KY，在sheet2查找K2：</p>
<pre>=VLOOKUP(KX, sheet2, index for K2)
=VLOOKUP(KY, sheet2, index for K2)</pre><p>sheet1新增的三列查找结果，都包含一些<code>N/A</code>，但所幸总算保证每条记录都找到K2。为了把sheet2的数据搬到sheet1的对应位置，现在要想办法把每条记录的<code>N/A</code>，空值，K2合并到一起。这里用到了<code>LOOKUP</code></p>
<h3 id="tricky">tricky</h3><pre>=LOOKUP(1, 1/(X1:Z1&lt;&gt;&quot;&quot;), X1:Z1)</pre><p>括号里的不等判断返回TRUE,FALSE，所以返回的就是1或者除0，自然能找到结果。</p>
<p>准确求出K2以后，将sheet2的数据取过来很简单，还是用<code>VLOOKUP</code>，只不过这次是横向填充，因此需要准备一个sheet4用于index递增。另外第一个参数的列位置要锁定，行值则不用。</p>
<pre>=VLOOKUP($L2,Sheet2!$A$2:$Q$412,Sheet6!A$1,FALSE)</pre>]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[百度助纣为虐]]></title>
        <link href="idea/baidu-sucks.html"/>
        <published>2016-05-02T00:00:00.000Z</published>
        <updated>2016-05-02T00:00:00.000Z</updated>
        <id>idea/baidu-sucks.html</id>
        <content type="html" xml:base="" xml:lang="en">
            <![CDATA[ <p>最近百度又因为良心问题上头条了，当然由于这个企业不认为自己良心有问题，所以类似的事情已经重复过很多次了，而且这一届的人民也很健忘。</p>
<p><a href="http://money.163.com/16/0501/19/BM0KPGJO00253B0H.html">http://money.163.com/16/0501/19/BM0KPGJO00253B0H.html</a></p>
<p>要客观的讨论百度，须要先撇开事件讨论对百度的看法。我认为，百度搜索结果非常垃圾，稍微专业一些的搜索关键字，给出的搜索结果多数是些错误的链接。但是搜索娱乐内容视频、小说、音乐倒是精准和方便，以前不讲版权的时代甚至公然侵权。</p>
<p>回到事件本身，如果要控告百度一项罪行的话，我认为，应该是，百度以主动意愿向用户呈现欺诈链接的搜索结果，依据是相关的欺诈搜索结果均呈现在第一搜索结果页的前几条中，有的链接设置加蓝V，并且有一定证据表明欺诈网站的广告主向百度支付了高额的广告费。</p>
<p>当然，有人不是这个观点，他并不认为百度此行为有任何错误，理由是百度向用户提供免费的搜索服务，并无义务向用户呈现最佳的结果，并有权处置链接在搜索结果页上的显示位置。</p>
<p>我并不反对这个观点，因为观点本身是合理的。但是百度行为失格的地方在于，他是一个社会基础广泛的服务，就像一个非常好用的指南针（实际上不好用，但对赵国多数人已经足够，并且这一届人民也没有太多选择），用户众多，但是却将指针故意指向广告主所要求的任意方向，使得用户落入欺诈的圈套。</p>
<p>在没有搜索引擎的前提下，欺诈网站想要精确的暴露在用户面前是困难的，而百度则将这种困难抹平，并且没有采取任何措施，甚至于收到广告费后将他们呈现到用户的搜索结果第一页的前几条中，这可不可以说是助纣为虐呢。</p>
<p>如果看到罪行只是旁观，那有可能是因为阻止有危险，沉默是合理的。但若是看到罪行影响的不够大，还客观而中立的推波助澜，那就太可怕了。</p>
<p>不过作恶的人不必害怕，没有遭天谴这种事。</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[我眼中未来的趋势]]></title>
        <link href="idea/thefuture.html"/>
        <published>2016-03-19T00:00:00.000Z</published>
        <updated>2016-03-19T00:00:00.000Z</updated>
        <id>idea/thefuture.html</id>
        <content type="html" xml:base="" xml:lang="en">
            <![CDATA[ <p>技术在加速，了解未来的可能性，才能立足在正确的方向上。这个时代的人都说，“我不想逆流而上，我只想找到一块山顶的石头，轻轻一脚”。</p>
<ul>
<li>所有的电器，机械全面联网，通过WiFi，RF射频的手段，也就是所谓的物联网。物联网只是全面联网的一个子集。联网的设备全部可以远程监控，编程控制，实现弱智能，提供人性化的服务。传感器会更加丰富，更加精确，更加集成。</li>
</ul>
<hr>
<ul>
<li>各行业使用大数据挖掘更加普遍，分类、聚类、关联是基本的手段，人类不断被分类和标签化，任何时候都能找到精准的群体。群体的属性没有隐私，离群者被风控重点关注。</li>
</ul>
<hr>
<ul>
<li>更多的互联网公司提供小微金融服务，从生活消费到大件消费，均以信用作为支付手段，信贷货币总量再次膨胀，股市会有一波上涨。</li>
</ul>
<hr>
<ul>
<li>更多的中小企业会采用相关领域的SAAS来提升自身的流程规范。一方面原因是开发者增多，所以能为更多的领域提供软件服务，另一方面则是软件的开发成本不断下降，中小企业可以负担采购成本。</li>
</ul>
<hr>
<ul>
<li>机械臂将大量取代体力劳动，重复的脑力劳动也渐渐被软件取代。</li>
</ul>
<hr>
<ul>
<li><p>未来是租用的时代（KK），比如Uber，Airbnb，使用物品的唯一方式不在是占有，而是可以租借。</p>
</li>
<li><p>VR的时代（KK），眼镜或者头戴设备，将真实与虚拟结合。我并不觉得VR会带来多大的改变，因为VR本质是一种输入输出方式，随着技术进步已有的屏幕式的输入输出手段会更加普遍更加成熟，对于大量复杂的操作环境来说，VR是无法涵盖所有情景的。VR比较有用的一个地方就是训练，但实际上也不一定是最合适的方案。</p>
</li>
</ul>
<hr>
<ul>
<li>人工智能？最近Alphago是很火，但是下棋只是一种简单的计算策略，现阶段的人工智能距离存在认知概念这件事情还很遥远，他们能根据图片推断出一只猫，但猫是什么对他们是没有认知的。他们可以通过积累的规范数据，挖掘你的习惯，更准确的为你提供已知的服务，但是他们无法创造出更多。</li>
</ul>
<p>自主思考是一件很神奇的事情，即使通过神经网络创造出未知的多样性，没有和人类一样的认知的智能是十分危险的，就跟无任何道德意识的高智商犯罪一样，可能做出危险的事情。</p>
<hr>
<p>这就是我眼中未来的趋势，他们都是科技上的趋势，我希望这些更发达的科技，能够推动社会和政治上的进步。虽然我们现在有更多更容易的渠道暴露黑暗，但是爪牙还很厉害，爪牙还在为经济原因而服从。但愿技术推动生产力的发展，使社会觉醒。</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[如何才能坚持写日记]]></title>
        <link href="idea/insist-on-writing.html"/>
        <published>2016-03-18T00:00:00.000Z</published>
        <updated>2016-03-18T00:00:00.000Z</updated>
        <id>idea/insist-on-writing.html</id>
        <content type="html" xml:base="" xml:lang="en">
            <![CDATA[ <p>俗话说的好，做事贵在坚持，学习如此，起床如此，写日记也是如此。</p>
<p>小学的事情我忘了，但中学我是写日记的，大体内容是记录新的世界观感想，叙述邻桌那位女同学。我一共写了好几本，直到有一天父母翻看了我的日记，我一把火就把它们都烧了，后来再也没有写过日记。上大学后，由于学技术的原因，写了好长一段时间的技术博客，学习感悟多的时候，几乎是周周发。渐渐的随着技术能力的积累，达到一个收益下降的边际，就很少发文了。</p>
<p>这一中断就是好长时间，中间也有过搭建新博客，但都是发了几篇后就再也写不出来，博客也删掉了。我的最后一个blog就是github，文章就在git repo，无处不在，不再像过去那样文章只留档在博客平台的数据库中，无法自己存留一份。为了珍惜这难得的写作机会，我又重新想起了写日记。</p>
<p>一开始我是用格志app做每天的记录，一周汇总一次，发周记到博客。持续了三个月，我又中断了。我坚持不下去除了懒，还有欲望。我没有在这个4英寸的屏幕上敲字的欲望，我没有只能敲字的欲望，我有时候需要其他的表达方式。用app写日记这个事情，没有美感。</p>
<p>在电脑上写日记我也有考虑过，觉得不习惯，肯定坚持不下去。它不能随时记录，要打开电脑等待开机，敲键盘影响思维漫游，电脑天然的多任务干扰，想按自己的样式进行书写的话成本也比较高。</p>
<p>就这样，我停了三个月，养精蓄锐，然后我买了一个日记本，铁环、16开到32开之间，细长细长。我又开始写日记了，手写。我随意的记录，一段文字，或者是一份清单，或者一份结构图，自由发挥。我买小笔记本，是怕页太大，留空太多，影响坚持的力量。每一本日记，都应该是越容易写完越有成就感，更容易坚持。我坚持下来了，并总结出一些让这事更容易的一些点：</p>
<ul>
<li>买小笔记本，越小越薄，越容易写完，接着买第二本漂亮的</li>
<li>打开左页右页的共同面，两页只能写一天的内容。或者只写右页，左页留白</li>
<li>行间距要大，文字写在两行的中间线上，可以更快的写满一页</li>
<li>除了生活，学习和工作都可以写，不限定只写文字，各种相关结构图都可以画，当成笔记，手帐</li>
<li>可以往页面上贴东西，图，照片，标签，任何当天相关的东西</li>
<li>几根彩带，做书签用</li>
</ul>
<p>为了坚持写日记而如此费心思，所为的也是记录，鞭策和努力。记录你的所见所闻，记录你今天所学，记录你的目标，记录你的思考，记录你的行动，然后回顾，总结，发blog。只有留下文字的人生，能够被重新读起，才没有白活。</p>
<p>下篇：我看到的未来的趋势</p>
]]>
        </content>
    </entry>
</feed>