<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Magic ABC</title>
    <link href="./" rel="self" />
    <link href="./" />
    <id>./</id>
    <entry>
        <title type="html"><![CDATA[周记1206]]></title>
        <link href="life/20151206-weekly.html"/>
        <published>2015-12-05T16:00:00.000Z</published>
        <updated>2015-12-05T16:00:00.000Z</updated>
        <id>life/20151206-weekly.html</id>
        <content type="html" xml:base="" xml:lang="en">
            <![CDATA[ <h2 id="时间">时间</h2><p>Yellow, 34 coins, 低于50 coins每周。最近是需要多努力一点。</p>
<h2 id="记事">记事</h2><ol>
<li><p>hbuilder云编译的应用有问题，无法装到4.4虚拟机，不得已自己下了一套sdk本地编译。</p>
</li>
<li><p>软件中级资格证拿到手了，太easy。</p>
</li>
<li><p>redis是好东西啊，订阅模式和有序队列。准备再看看zookeeper。</p>
</li>
<li><p>纪念碑谷限免，通过，确实是神一般的游戏。
<img src="/life/pic/jnbg1.png" alt="game1">
<img src="/life/pic/jnbg2.png" alt="game2"></p>
</li>
</ol>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[周记1123]]></title>
        <link href="life/20151122-weekly.html"/>
        <published>2015-11-21T16:00:00.000Z</published>
        <updated>2015-11-21T16:00:00.000Z</updated>
        <id>life/20151122-weekly.html</id>
        <content type="html" xml:base="" xml:lang="en">
            <![CDATA[ <h2 id="时间">时间</h2><p>Yellow 40<br>Orange 20  </p>
<p>这周事情做的不多啊。</p>
<h2 id="事件">事件</h2><p>负责需求的人必须会做原型，方能降低沟通成本和返工工作量。</p>
<p>公司要求调档，去咨询一下，我的档案还在大学生就业中心，不在人才中心，无法办理转正定级，最坏的情况就是丢掉几年工龄。</p>
<p>每周出差去桂林，其实蛮无聊的，真是一份无聊的工作啊。</p>
<p>订单表还是要记录一些产品冗余信息的，为了显示和快照。</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[周记]]></title>
        <link href="life/20151116-weekly.html"/>
        <published>2015-11-15T16:00:00.000Z</published>
        <updated>2015-11-15T16:00:00.000Z</updated>
        <id>life/20151116-weekly.html</id>
        <content type="html" xml:base="" xml:lang="en">
            <![CDATA[ <h2 id="统计">统计</h2><p>橙色：22枚<br>黄色：54枚<br>蓝色：32枚  </p>
<p>周末实在太懒散了，什么都没有做。</p>
<h2 id="本周要事">本周要事</h2><ul>
<li>怕冷，容易感冒</li>
<li>在处理档案和贷款合同的事情上，容易犯拖延症，怕与人接触。不过据说积极性和注意力一样是一种每日有限资源，如果在一件事情上投入多了，别的事情就会需要反方向的补充。</li>
<li>唉</li>
</ul>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[rails小项目的一些分享]]></title>
        <link href="idea/rails-exp.html"/>
        <published>2015-11-15T16:00:00.000Z</published>
        <updated>2015-11-15T16:00:00.000Z</updated>
        <id>idea/rails-exp.html</id>
        <content type="html" xml:base="" xml:lang="en">
            <![CDATA[ <p>为了满足自己炒股兴趣的需要，根据<a href="http://www.amazon.com/Little-Book-Still-Beats-Market/dp/0470624159">《神奇公式》</a>，对A股市场做了一个排序系统，既完成了一个对自己有效的需求，也从中学习rails。</p>
<p><strong>Source</strong> : <a href="https://coding.net/u/hwh008/p/mss/git">https://coding.net/u/hwh008/p/mss/git</a></p>
<p><strong>Site</strong> : <a href="http://www.magica.me">http://www.magica.me</a></p>
<h2 id="爬虫">爬虫</h2><p>股票的财务数据都是从sina抓的，所以<a href="http://www.nokogiri.org/">Nokogiri</a>是首选，有了他，做点基础的爬虫实在太容易了。</p>
<p>用whenever每天定点去爬一下收盘价，顺便检测一些需要更新财务数据的股票。</p>
<pre>StockInfo.tick_sheet</pre><h2 id="缓存">缓存</h2><p>我有一个很耗时的model函数，也就是对所有股票进行排序的公式实现：</p>
<pre>StockSheet.calc_better_cheap</pre><p>我希望这个公式的结果页面显示后，可以重用这个页面，不要重新计算排序，因此我尝试了action cache和fragment cache，然而并没有什么卵用，因为这两种cache都还是要执行controller#action的，费时的函数调用恰好放在action中。我可以把这个调用放到view里，这样就解决了问题，但是又涉及到请求参数变化的问题，而且这串调用放到view里也带来了限制，不方便在action里对数据做更多的修饰。  </p>
<p>另外，我也搞不清楚fragment cache的实现机制和最佳实践。</p>
<p>经过搜索我找到了<a href="https://github.com/qor/qor_cache">qor_cache</a>，还是国人的优秀作品，有3点好处：</p>
<ol>
<li>针对Model函数结果的cache，正好我就是model函数耗时多。</li>
<li>qor_cache wrap了我指定的函数，使得我的代码对这个gem没有依赖，可以轻易的从config中删掉qor_cache。</li>
<li>以接口的方式告诉我一条cache的最佳实践：<blockquote>
<p>The cache key is the fluid part and the cache content is the fixed part. A given key should always return the same content. You never update the content after it’s been written and you never try to expire it either.</p>
</blockquote>
</li>
</ol>
<pre>cache_key &#39;stock_update&#39; do
    StockInfo.first.updated_at
end

scope :stock_sheet do
    cache_class_method :calc_better_cheap, &#39;stock_update&#39;
end</pre><p>函数的输入参数是一个hash obj，qor_cache将参数作为cache key的一部分，但是这个hash obj中，其实有些key并不影响cache，因此我根据qor_cache做了一个hack：</p>
<pre>hash_obj.instance_eval do
        # 为了优化qor cache，不是每个选项都影响cache key
        def inspect
            %Q(inspect redefine:#{self[&quot;mktcap_min&quot;]},#{self[&quot;mktcap_max&quot;]})
        end
        self
    end</pre><h2 id="翻页">翻页</h2><p>我没有使用will_paginate，因为will_paginate只包装relation对象，但我要做的是对数据进行排序计算，已经将数据全部都取出来了，因此找了一个支持page array的gem：<a href="https://github.com/amatsuda/kaminari">kaminari</a>，听这名字像日本人写的gem。</p>
<pre>  def better_cheap
    stocks = Kaminari.paginate_array StockSheet.calc_better_cheap(calc_params)
    @stocks_page = stocks.page(params.fetch(:page, 1)).per 100
  end</pre><h2 id="函数式fp">函数式FP</h2><p>函数式编程其实就是好看，可以把对集合的一连串操作都写在一行里，长长的。</p>
<p>神奇公式的排序算法就是，将集合所有元素根据指标A排序，取排序顺序为分数A，再根据指标B排序，取排序顺序为分数B，根据分数AB之和再排序。写到一行里是这样的：</p>
<pre>def self.calc_better_cheap(opt)
    available(opt).sort { |a, b| a.better_v &lt;=&gt; b.better_v }.reverse.map.with_index(1) { |el, i| el.better_ord = i ; el}.sort { |a,b| a.cheap_v &lt;=&gt; b.cheap_v }.reverse.map.with_index(1) { |el, i| el.cheap_ord = i; el}.sort { |a,b| a.bc_value &lt;=&gt; b.bc_value }
  end</pre><h2 id="nginx-passenger">nginx + passenger</h2><p>生产部署用的是passenger，很简单，安装就好了。就是环境变量遇上了一些问题，后来通过dotenv-rails解决。</p>
<h2 id="helper让view漂亮">Helper让View漂亮</h2><p>有两种不漂亮的写法，一种是在view里写表达式，另一种是在action里把表达式算好的结果放到instance var。</p>
<p>不过erb模版对Helper的支持还是不够漂亮，我比较倾向的是那种管道式的，这样可以把一串helper像羊肉串一样串起来。</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[周记1111]]></title>
        <link href="life/20151111-weekly.html"/>
        <published>2015-11-10T16:00:00.000Z</published>
        <updated>2015-11-10T16:00:00.000Z</updated>
        <id>life/20151111-weekly.html</id>
        <content type="html" xml:base="" xml:lang="en">
            <![CDATA[ <p>橙色：42枚<br>黄色：31枚<br>蓝色：08枚<br>红色：02枚  </p>
<p>奖励31/4 - 2/2 = 6枚</p>
<p>这两周的量都不是很足够，因为工作的活儿有点多。</p>
<h2 id="本周要事">本周要事</h2><ul>
<li><p>房贷办理下来，开始要还了，每个月2800，有点不爽，出钱总是不爽的。</p>
</li>
<li><p>做了点马尔代夫的调研，找到一个选岛工具。一般两人预算也就3w多吧，想玩浮潜和水屋，我喜欢无边泳池啊。</p>
</li>
<li><p>股票的网站上线了，域名也申请下来，还是很有意思的，<a href="http://www.magica.me">筹码游戏</a>。我的个人博客也放在这个二级域名下了，<a href="http://blog.magica.me">MAGICABC</a>。</p>
</li>
<li><p>古摄影想来消除老婆写的差评，最后不得不计划重拍3套，其实我对重拍真是没什么兴趣了，但是他们又不肯赔钱，磨磨唧唧的最后出卖了自己。</p>
</li>
<li><p>以10元价格蹭了联通的2G流量，又一阵子无忧啦。</p>
</li>
</ul>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[周记]]></title>
        <link href="life/20151101-weekly.html"/>
        <published>2015-10-31T16:00:00.000Z</published>
        <updated>2015-10-31T16:00:00.000Z</updated>
        <id>life/20151101-weekly.html</id>
        <content type="html" xml:base="" xml:lang="en">
            <![CDATA[ <p>黄色：040枚<br>橙色：040枚  </p>
<p>没有达标50枚标准，因为周末感冒严重了，现在还是不停打喷嚏，不舒服啊。</p>
<h2 id="本周记事">本周记事</h2><p>Vuejs发布1.0版本，本来打算升级，阅读更新公告后发现只是增加了一些语法简写以及控件子事件指令，我模仿着写一个指令，并不升级。</p>
<p>做app用HBuilder，真是好东西不用愁，可以在win打包apk发布，还可以发布到iphone真机调试，指令也比较全面，真是好用的没话说。</p>
<p>周五想挑周边玩玩，结果发现除了桂林，其他景点真是又小又难看，毫无可看的。其实桂林也真是超级low的，皮条客满街都是。</p>
<p>在sprint+jsp环境下尝试web服务端开发的最佳实践，也就是template,layout,helper这些东西，用jsp的simple tag完成的。虽然也做到了，不过总是要带入taglib也真是相当不方便。</p>
<p>周末走了走青秀山，阴天偶尔小雨，看看各种植物还是非常不错的。</p>
<p>基于rails的股票神奇公式计算项目<a href="https://coding.net/u/hwh008/p/mss/git">MSS</a>，第一阶段完成啦。第一阶段做的就是抓股价和财报数据，按神奇公式计算排名和安全值。准备开始第二阶段，抓相应的财务指标走势数据，用分类器进行分类，并给出买入建议。</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[周记]]></title>
        <link href="life/20151026-weekly.html"/>
        <published>2015-10-25T16:00:00.000Z</published>
        <updated>2015-10-25T16:00:00.000Z</updated>
        <id>life/20151026-weekly.html</id>
        <content type="html" xml:base="" xml:lang="en">
            <![CDATA[ <p>绿色：100枚<br>黄色：050枚<br>橙色：030枚<br>红色：006枚  </p>
<p>经过几周的记录，基本可以明确一周大概200枚金币。时间如金钱，用一枚少一枚。其中绿色布局在100枚出头，不再另计。主要登记黄橙红蓝，黄色能保持在50枚以上是情况比较好的情形了，再往上努力则更加辛苦。红色应保持在10枚以下，橙色不使用的时候则是向黄色进行补充。</p>
<blockquote>
<p>人生苦短，2/3的时间用在吃，睡，聊上面，约1/6用在有意义的事情上，1/6用在挣生活费上。</p>
</blockquote>
<h2 id="本周要事">本周要事</h2><ol>
<li><p>小领导的白事，第一次听说白事也给份子钱，给了。</p>
</li>
<li><p>拿到项目首付款，啧啧，真是突然挣了一下。</p>
</li>
<li><p>周六跟LP闹矛盾了，嗯，有我的不对。做人还是容易苛刻啊，可是又不甘心一起拉低水平线。</p>
</li>
<li><p>这个月市场还是猜的挺准的，利用A类和创业板ETF反复对冲，喝了点汤水。</p>
</li>
</ol>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[选择前端框架的想法]]></title>
        <link href="idea/vuejs.html"/>
        <published>2015-10-25T16:00:00.000Z</published>
        <updated>2015-10-25T16:00:00.000Z</updated>
        <id>idea/vuejs.html</id>
        <content type="html" xml:base="" xml:lang="en">
            <![CDATA[ <h2 id="我接触过的阶段">我接触过的阶段</h2><p>应该是从jquery+div开始第一次接触的，那时候整个前端对非这个方向的人还是很麻烦的，css和布局都不会调整，即使会写脚本随意的操作dom，写出来的界面也是丑陋无比。这个时代想要个好看的动态控件都是靠找javascript库。</p>
<p>第二个阶段是bootstrap，总算有一个不用靠设计师也能做出对齐标准的css框架了，而且学起来还不难。随后一大片bootstrap like的小网站就纷纷冒出来了，以及更多的css框架也发布出来。虽然一时间也审美疲劳，但是不可否认这种css框架解决了基本的控件样式和对齐问题。</p>
<p>第三个阶段应该是ember,backbone这种库吧，我没有参与到这个阶段，但感觉上这应该是SPA，rich client的一个过渡阶段。这个阶段的库包含了model,view,controller,router,store等元素，整个就是一个rails的客户端化。这样一个发展方向有些偏激了，库的学习成本高，并且很难和别的库，框架兼容，所以我认为这是一个过渡阶段。</p>
<p>第四个阶段就是现在，以reactjs,angularjs为代表的组件化和数据绑定阶段。这个阶段基本上屏蔽了dom操作，使得页面标签更具语意和功能，可读性和可维护性都更高。这个阶段的关键技术是指令，filter,组件。</p>
<h2 id="在组件化和数据绑定时代下的选择">在组件化和数据绑定时代下的选择</h2><p>这是一个比以前都好的时代，从技术上说，各种表现技术越来越完善，门槛越来越低。</p>
<p>组件化和数据绑定为基础，并以指令和filter相配合，在客户端的model,view层面已经是威力倍增。我认为目前的技术条件下，前端的开发结构以VM(view,model)为一个聚集，styling,router为另一个聚集是合适的。</p>
<p>styling就是各种css框架，从bootstrap开始，无数的后起之秀，带来了丰富的基本控件和页面结构，以及多种的终端适配，PC的，HTML5的，hybrid app的。特别是介入SPA的内页切换后，内置的router和基本的约定规则势在必行。</p>
<p>另一块则是view,model，view负责渲染模版，model负责向模版提供数据。特别是数据绑定的概念普及以后，操作dom渐渐被视为异类，这两块已经没有必要再拆分了。view在渲染模版方面则出现了自定义组件的引擎，并配合指令和filter，极大的拓展的页面代码的复用和可理解性。</p>
<p>基于这一看法，ember等全面的MVC router大框架逐渐淘汰也是必然。大家其实要的是更好的组装性和组件性，而不是在一棵树上吊死。</p>
<p>在VM库上，除了代表者reactjs和angularjs，还有很多后起之秀，如Vue.js。angularjs我看过，用内置的指令还简单，自己开发新指令文档描述的令人发指。reactjs也看了，我实在不喜欢把组件和代码都写到script标签下。最后选定的还是Vue.js，数据绑定简单明了，新建组件、指令和filter也都是一句话的事情。</p>
<p>至于Vue.js这样的VM库是否适应所有的web项目，我还是觉得这要考虑项目想做成什么样子，以及server端框架的完善性。如server端是rails，多数情况是没必要用VM库的。但是若开发一个SPA，从服务端取json，那一个适合的css框架和VM库，会让工作事半功倍。</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[周记]]></title>
        <link href="life/20151019-weekly.html"/>
        <published>2015-10-18T16:00:00.000Z</published>
        <updated>2015-10-18T16:00:00.000Z</updated>
        <id>life/20151019-weekly.html</id>
        <content type="html" xml:base="" xml:lang="en">
            <![CDATA[ <p><strong> 摆酒过门 </strong></p>
<p>10月9日办的，中午12点才磕的头，急急忙忙的1点才开始，几乎没有迎宾。等每桌敬酒客人就已经吃饱要走了。<br>当天的安排上现在想想还是有些遗憾的，但是新生活在继续中又开始了。</p>
<p><strong> 本周其他要事 </strong></p>
<ol>
<li><p>在桂林吃了份辣椒炒粉，第二天拉了3次。。。。这食物的毒性甚过北京。</p>
</li>
<li><p>琅琊榜电视剧看完了，也是沉迷了几日。</p>
</li>
<li><p>桂林银行是不是有什么人得罪桂林网安了，一直被死咬不放，现在又拿流程不规范说事，暂时关闭了。</p>
</li>
<li><p>ios升级9.0.2，然后卡就不能用，没信号了。直到上周末找人修理，发现是我以前剪的大卡出问题了，去营业厅换张小卡就好了。<br>还以为要跟北京彻底告别呢，手机号还是北京的。</p>
</li>
<li><p>重仓大量分级A，一支股票都没有，就等着股市临时下跌呢。</p>
</li>
</ol>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[周记]]></title>
        <link href="life/20150929-weekly.html"/>
        <published>2015-09-27T16:00:00.000Z</published>
        <updated>2015-09-27T16:00:00.000Z</updated>
        <id>life/20150929-weekly.html</id>
        <content type="html" xml:base="" xml:lang="en">
            <![CDATA[ <p>绿色：140，67%<br>橙色：032，15%<br>黄色：028，13%<br>红色：009，04%  </p>
<p>总计：209<br>奖励：28/4 - 9/2 = 2.5 (一个半小时)</p>
<p><strong>本周要事</strong></p>
<ol>
<li><p>去兴业的事情黄了，也没怎么可惜，毕竟不想分居</p>
</li>
<li><p>电商被检测出重置任意用户密码的漏洞，原始的原因竟然是开发公司愚蠢的两次请求的接口写法，框架落后坑自己啊</p>
</li>
<li><p>看小说容易沉迷当前的情节，浪费时间</p>
</li>
</ol>
<p>看来本周没有发生积极的事情，遗憾。</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[周记]]></title>
        <link href="life/20150921-weekly.html"/>
        <published>2015-09-20T16:00:00.000Z</published>
        <updated>2015-09-20T16:00:00.000Z</updated>
        <id>life/20150921-weekly.html</id>
        <content type="html" xml:base="" xml:lang="en">
            <![CDATA[ <p>绿色: 119, 55.5%<br>黄色：055, 25.5%<br>蓝色：016, 7%<br>橙色：013, 6%<br>红色：003, 1.5%  </p>
<p>总计：206</p>
<p>本周发生的事情：</p>
<ol>
<li><p>下载了rails guide的git，在火车路上进行阅读，拓展了学习时间。</p>
</li>
<li><p>古摄影的产品很垃圾，完全没有后期，我妹子被迫自己成为了PS大神。现在承接婚纱照、写真照精修，100一张，满意为止。</p>
</li>
<li><p>周五少挣了1K，从中学到，止赢比止损更有本事，犹豫有风险。</p>
</li>
</ol>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[周记]]></title>
        <link href="life/20150913-weekly.html"/>
        <published>2015-09-12T16:00:00.000Z</published>
        <updated>2015-09-12T16:00:00.000Z</updated>
        <id>life/20150913-weekly.html</id>
        <content type="html" xml:base="" xml:lang="en">
            <![CDATA[ <p>绿色：100枚，46%<br>黄色：072枚，33%<br>橙色：026枚，12%<br>蓝色：011枚，5%<br>红色：008枚  </p>
<p>总计：209枚</p>
<p>有进步，黄色时间大量增加了，绿色的和橙色的这两周都差不多。<br>(黄色/4 - 红色/2) 努力产生的奖励时间是必须的，不然这个游戏就没有积极性。</p>
<p>本周发生的事情：</p>
<ol>
<li>hyc找我做个印刷系统的订单管理项目。调研中发现了nativescript，做原生app是好物。reactjs现在还不支持android。</li>
<li>配了新眼镜，拿到验光数据，视力不过度使用的话，已经不会有什么太大变动了。以后可以凭借这份验光数据在x宝多配几副在几个地方备用。</li>
<li>发现厉害的大学同班孙胖子是现在coding.net的CTO，我最近一直在公司和家里同步vagrant box，现在直接用coding，就不需要同步了。</li>
</ol>
<p>需要找个方式，一天记一事才行。</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[周记]]></title>
        <link href="life/20150906-weekly.html"/>
        <published>2015-09-05T16:00:00.000Z</published>
        <updated>2015-09-05T16:00:00.000Z</updated>
        <id>life/20150906-weekly.html</id>
        <content type="html" xml:base="" xml:lang="en">
            <![CDATA[ <p>绿色：128枚，80%<br>橙色：024枚，13%<br>红色：012枚，06%<br>黄色：004枚，02%  </p>
<p>总计：168枚  </p>
<p>这就是我现在的生活，都在绿色的琐事中渡过了。</p>
<p>本周的3件糗事：</p>
<ol>
<li>开车导航去南宁东，结果导航到火车东。一路上看到了路标，但是还是跟着错误的导航走。这里有3个错误：</li>
</ol>
<ul>
<li>导航上本身就有说明，以实际的路标指示为准。在路上，请随时注意路标，发生偏差时要停下来确认；</li>
<li>导航设定后，要检查设定的线路；</li>
<li>在路上，对线路产生怀疑时，要立刻停下来检查。前面一辆开奔驰的早掉头了，我比别人多走了一倍的路才掉头；</li>
</ul>
<ol>
<li><p>做事要早做准备，拖延没有好处，相关的资料和物品也提前准备好，这样能节省时间。去取房子发票的，没有提前拿上相关材料，导致先去取钥匙，然后又返回去取资料，很累人。</p>
</li>
<li><p>本周搬了新住处，3户合租的，房子小客厅大，厨房乱糟糟，不能好好做饭了。</p>
</li>
</ol>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[手游《神偷》设计分析]]></title>
        <link href="game-art/thief-game.html"/>
        <published>2015-02-14T16:00:00.000Z</published>
        <updated>2015-02-14T16:00:00.000Z</updated>
        <id>game-art/thief-game.html</id>
        <content type="html" xml:base="" xml:lang="en">
            <![CDATA[ <p><img src="res/thief.jpg" alt="game"></p>
<h2 id="it-is-simple">It is Simple</h2><p>The character is a black squre with eyes.<br>
It is a tap tap game, the character is controlled by tap. tap to jump, tap to change moving direction when the character touches the wall.</p>
<h2 id="charge1-player-39-s-design-are-variousness">Charge1: Player&#39;s Design are Variousness</h2><p>Every player get a room as secret base, they can enter other one&#39;s room to steal golds and ruby.<br>
You can buy the trap suit from mall and place the them to kill the invaders. different suit includes different traps, the amount of traps are restricted, you are allowed to use 1 suit at 1 time only.<br>
After you finish designing the room with traps, you must pass these traps 2 turns to prove that you don&#39;t obstruct the whole road, the others have the opportunity to steal something.</p>
<h2 id="charge2-steal-the-ruby">Charge2: Steal the Ruby</h2><p>When you steal others, you can use props to change the game be easier, such as character copies, slow time and break trap etc, these props are sell in mall.<br>
After you pass all traps and touch the ruby chest, you have opportunity to steal 1 ruby. the opportunity is decrease along with the times you die, so use props to reduce your death is good choice.<br>
In case you don&#39;t win the ruby, you can pay for rolling the dice again and again.</p>
<h2 id="charge3-ruby-combination">Charge3: Ruby Combination</h2><p>The game&#39;s goal is to combine better ruby, 2 ruby can combine to a better quality one.<br>
Ruby合成时需要消耗一定时间，这就留给其他人偷取ruby的机会。如果你不想合成中的宝石被偷掉，可以花钱立即完成合成进程。</p>
<h2 id="charge4-cloth-combination">Charge4: Cloth Combination</h2><p>角色的外观是通过材料合成的。材料只有4种，可以从商城购买。<br>
不直接从商城出售外观成品的原因，主要是可以在PVE中发放部分种类的材料。如果合成配方和角色等级相关，还可以促进玩家在每个等级段的外观消费。</p>
<h2 id="pvp-revenge">PVP: Revenge</h2><p>游戏的对抗是随机到某一个玩家的基地进行偷取，困难的陷阱会将入侵者杀死多次，这些杀伤数可以给基地增加收益。<br>
玩家会在上线后收到基地入侵通知，如果ruby被偷取，必然报复性的去偷取对方。假如通关后没有抽中仇人的ruby，由于愤怒和不甘必然消费进行多次抽取。</p>
<h2 id="game-pace">Game Pace</h2><p>为了控制玩家长时间的连续攻击他人，进入基地偷取前需要用手头的钥匙打开基地的锁。一扇门有很多把锁，玩家一定时间里只有有限的钥匙去试锁，因此玩家偷取次数就被控制了。<br>
基地的钥匙数量和门上的锁数量都可以通过升级基地提高。<br>
另外，低保设计，为了让死亡多次的玩家完成偷取，系统会禁用1个陷阱来降低关卡难度，保证不购买道具也可以通关。</p>
<h2 id="pve">PVE</h2><p>这里PVE特指不花RMB的功能点。<br>
基地中的陷阱是可以通过gold升级的，升级后会对死亡造成更多伤害，更快的降低别人抽到ruby的概率。<br>
地图上还有很多策划预设的关卡，通过这些预设关卡刷gold，来对基地进行升级。</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Minimal UI Elements for Game]]></title>
        <link href="game-art/minimal-ui-elements.html"/>
        <published>2015-02-08T16:00:00.000Z</published>
        <updated>2015-02-08T16:00:00.000Z</updated>
        <id>game-art/minimal-ui-elements.html</id>
        <content type="html" xml:base="" xml:lang="en">
            <![CDATA[ <h2 id="elements-for-game">Elements for Game</h2><ol>
<li>Banner in first screen</li>
<li>Button frame</li>
<li>Window frame</li>
<li>Next and prev button</li>
<li>Normal icons: config, close, star, heart, chest, locker, gem, coin, pause</li>
<li>Progress bar</li>
<li>Choose level: normal and boss, lock and unlock</li>
<li>List frame</li>
<li>Grid frame</li>
<li>In game background and tiles.</li>
<li>Poster</li>
</ol>
<h2 id="first-screen">First Screen</h2><p>It is composed by 2 things.<br>
<strong>Background</strong></p>
<p>It can be the clean color or a drawing. You can translate the drawing repeatly.
<img src="min-ui/firstscreen1.jpg" alt="firstscreen"></p>
<p><strong>Title and Characters</strong></p>
<p>You can show the title with big font only. you can also add some game characters behind the title.
You can add some float animation to the characters.
Only 1 thing is dynamic in both background and title&#39;s elements.
<img src="min-ui/firstscreen2.jpg" alt="firstscreen">
<img src="min-ui/firstscreen3.jpg" alt="firstscreen"></p>
<h2 id="button-frame">Button Frame</h2><p>You can draw some delicate button, or just use a clean color box with shadow as your button, but remember it should be enlarged as a frame.</p>
<h2 id="window-frame">Window Frame</h2><p>Normal border and clean color inside the content area, or try more simple design without border.
<img src="min-ui/window1.jpg" alt="window"></p>
<h2 id="choose-level">Choose Level</h2><ul>
<li>A background which is simple drawing or clean gradient color</li>
<li>A title as <em>&#39;CHOOSE LEVEL&#39;</em></li>
<li>Level icons</li>
<li>Next and prev button to shift level page</li>
</ul>
<p>A simple design is showing 5x5 grids for levels of each section, each section use different background.
<img src="min-ui/chooselevel.jpg" alt="chooselevel"></p>
<h2 id="list-frame">List Frame</h2><ul>
<li>Title and description</li>
<li>Neighbor item must be distinct, you can make this by light/dark color or item border</li>
<li>Item left is icon</li>
<li>Item middle is title and description</li>
<li>Item right is an event button</li>
<li>If the count of items more than 1 page,  do not use vertical scroll, flip page by next and prev button</li>
</ul>
<p><img src="min-ui/listframe.jpg" alt="listframe"></p>
<h2 id="grid-frame">Grid Frame</h2><ul>
<li>Clean color as background</li>
<li>Title on top</li>
<li>Item icon and selected cursor</li>
<li>Show description on bottom when item is selected</li>
<li>Do not use vertical scroll, use flip page</li>
</ul>
<p><img src="min-ui/gridframe.jpg" alt="gridframe"></p>
<h2 id="in-game-background-and-tiles">In Game Background and Tiles</h2><ul>
<li>Background -1 is a static shade, as paint by brush with clean color, it don&#39;t contain any detail. or you can use a sky drawing by gradient color</li>
<li>Background 1 is the near sight, it move follow by character</li>
<li>It must need 2 small tiles and 1 big tiles at least, and shade them with 2 colors, then you get 4+2 tiles</li>
</ul>
<p><img src="min-ui/gamescn1.jpg" alt="scn1">
<img src="min-ui/gamescn2.jpg" alt="scn2"></p>
<h2 id="poster">Poster</h2><ul>
<li>Title</li>
<li>Banner</li>
<li>Description</li>
<li>Event button on bottom with different color background</li>
</ul>
<p><img src="min-ui/poster.jpg" alt="poster"></p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[angular.js 笔记]]></title>
        <link href="idea/angularjs.html"/>
        <published>2015-01-01T16:00:00.000Z</published>
        <updated>2015-01-01T16:00:00.000Z</updated>
        <id>idea/angularjs.html</id>
        <content type="html" xml:base="" xml:lang="en">
            <![CDATA[ <h2 id="页面和路由定义优先设计">页面和路由定义优先设计</h2><p>所有页面模板可以包含在一个文件中：<br></p>
<pre>&lt;script type=&quot;text/ng-template&quot; id=&quot;index.html&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/ng-template&quot; id=&quot;list.html&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/ng-template&quot; id=&quot;content.html&quot;&gt;&lt;/script&gt;</pre><p>使用路由系统需要导入ngRoute：<br></p>
<pre>app.config([&#39;$routeProvider&#39;, function($routeProvider){}]);</pre><p>当你的操作想跳转到别的地址时，使用 $location.path=。<br></p>
<h2 id="控制器和服务">控制器和服务</h2><p>理论上一个页面一个控制器。控制器里面定义模型数据值，可以直接渲染成页面结果，非常直接方便。<br></p>
<pre>app.controller(&#39;index_controller&#39;, function($scope){
    $scope.some_model = value;
});</pre><p>一般模型的数据来源都是服务器端，从服务器端请求数据的抽象包装成服务的样子。一些在多个控制器共享的全局数据也可以装进服务里。<br></p>
<pre>app.factory(&#39;some_svr&#39;, function(){});</pre><h2 id="常用指令和服务">常用指令和服务</h2><ol>
<li>ng-app</li>
<li>ng-init 初始化一些模型值，调试或者配置的时候用；</li>
<li>ng-repeat dom元素重复</li>
<li>ng-show/ng-hide</li>
<li>ng-class</li>
<li>ng-click 控件点击行为</li>
<li>ng-controller</li>
<li>$location</li>
<li>$http ajax接口</li>
<li>$timeout 定时器</li>
<li>$q 异步委托promise</li>
</ol>
<h2 id="单机测试">单机测试</h2><p>因为有promise，所以可以无服务器的时候用promise模拟服务器响应结果，做单机demo很方便。以后接入服务器只需要修改服务的内部代码，而不需要调整结构。<br></p>
<pre>var df = $q.defer();
df.notify(value); //通知用户更新状态
df.resolve(value); //通知用户委托正常结束
df.reject(value); //通知用户委托异常结束

var p = df.promise;
p.then(fn1, fn2, fn3);</pre><p>模拟的时候用$timeout延时后给调用者反馈结果。实际调用服务器接口的时候也可以通过promise将多个原子接口包装成为一个业务。</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[离开游戏圈]]></title>
        <link href="life/201412-backhome.html"/>
        <published>2014-12-22T16:00:00.000Z</published>
        <updated>2014-12-22T16:00:00.000Z</updated>
        <id>life/201412-backhome.html</id>
        <content type="html" xml:base="" xml:lang="en">
            <![CDATA[ <p>回广西已经有一个月了，进了一家城商银行的科技部。<br>
老大已经给我们申报10w以上的税前年薪了，不过这个月还领不到钱，地方上的氛围还是老传统，办个事要经报党委书记的。<br>
平时每月只发60%的工资，剩下40%作为年底的绩效奖金。到底是谁想出来这么损的主意，拿别人的应得的钱作为胡萝卜。<br>
南宁的房价是7K-1W，仔细想想，总算是在可接受的范围内。我曾经有那么几天， 特别失落于每月3K-5K的工资，感觉不能愉快的购物了。实际上花钱的时候，我确实更谨慎了，这种谨慎已经很多年不曾有过了。<br>
<br>
我想过若是不如意，重新跑出去就是了。但是看到我妈周五同车来接我，周日又同车送我，打消了我的念头，这不就是我最初的执念么。<br>
短期内落差一般是存在的，但是谁能说一年后不会好转呢。刚刚回来立足，不得不从0开始。<br>
即便起薪低，我实际能做的事情还是比别人多一些。除去更多的进行股票交易:</p>
<ol>
<li>我需要从Elance中挣取更多的$，Unity和blender两方面均可。</li>
<li>继续学习ruby rails和前端。</li>
<li>参与这些圈子，获得remote job。</li>
</ol>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[demo《黑猫》的制作过程]]></title>
        <link href="game-art/blackcat.html"/>
        <published>2014-09-17T16:00:00.000Z</published>
        <updated>2014-09-17T16:00:00.000Z</updated>
        <id>game-art/blackcat.html</id>
        <content type="html" xml:base="" xml:lang="en">
            <![CDATA[ <p>这是工作7年后的第一次独立制作。上一次的独立制作是在7年前，在学校里为找工作准备的一些项目。</p>
<p>这次制作的目标是indie game
，虽然最终没有完成，但是制作过程可供回顾和参考。</p>
<h2 id="最初设计">最初设计</h2><p>制作游戏的第一步，就是要有点子。除了平时的记录和积累，用一个系统的头脑风暴流程来产生游戏点子更有效率。</p>
<p>我采用了一个称为<a href="http://www.gameseeds.net/">game seeds
</a>的思路。<strong>首先是以随机的方式定义一个主角的属性</strong>，比如：</p>
<blockquote>
<p>物种：生物</p>
<p>性别：female</p>
<p>时空：现今</p>
<p>习性：流动</p>
<p>身材：2x1（最大3x3）</p>
<p>生命：2（最大6，下同）</p>
<p>攻击：5</p>
<p>速度：4</p>
<p>智力：6</p>
<p>领导力：2</p>
</blockquote>
<p><strong>通过这些随机的属性，想象主角的样子，把他画到纸上，并写下他拥有的能力和性格</strong>。我想到的是一只优雅的黑猫，跑得快，能走钢丝，会瞬移，会电击。</p>
<p>用同样的方式，或者直接设计，再定义一个配角。我想到的是一个互补的角色，大黄狗，速度慢，但是生命力顽强，能撞坏一些较大的障碍物。</p>
<p><a href="http://www.gameseeds.net/">game seeds</a>预定义了30种游戏类型，<strong>以随机的方式，抽取主游戏类型和辅游戏类型，设计游戏特性</strong>。我抽取到的是spy和navigate。</p>
<p>spy是潜入游戏，我参考了很多的2D游戏的潜入设计，然后想了很多系统点子，最终精简到6条。</p>
<ul>
<li>移动和光影暴露系统。移动分快速和潜行</li>
<li>进入物体内躲避</li>
<li>AI视野和分级</li>
<li>跳箱子</li>
<li>走线和墙沿</li>
<li>电击</li>
</ul>
<p><strong>想很多点子，但是只选择5条，独立制作的工作量绝不可以大。</strong></p>
<h2 id="功能实现">功能实现</h2><p>做完最初设计，可以开始用代码和资源实现系统点子了。</p>
<p><img src="./blackcat/origi_snap.png" alt="origi_snap"></p>
<p>这就是我实现各种点子的关卡，花盘可以进入躲避，箱子和横杆可以跳跃，灯光增加你的暴露值，而守卫则用来发现你。</p>
<p>这些道具一字排开的摆在一个平面关卡中，逐步进行实现。素材都是自己画的方块，纯色的。<strong>实现基本功能点的时候，不要找素材，不要设计关卡，用成本最低的方式开始进行编码。</strong></p>
<h2 id="关卡设计">关卡设计</h2><p>等那几个游戏点子实现的差不多了，就可以开始设计第一关。我阅读了一些如何设计platformer关卡的文章，首先<strong>第一步是，画出关卡线路简图</strong>。有多简介呢？只用一根线表示地面和墙，随意的绘制整个关卡的区域线路，图上不考虑其他素材的放置。</p>
<p><img src="./blackcat/level_1.png" alt="level_1"></p>
<p><strong>紧接着设计一些关卡的局部特性</strong>。这些局部特性是独立的，可以复用的设计，不要放到关卡线路简图中考虑。比如躲避物和守卫的摆放设计，箱子和通道口的设计，陷阱摆放设计，地形局部设计等等。</p>
<p>局部特性是玩家在视野内面对的具体挑战，每一个设计都为玩家预留了破解方法。</p>
<p><img src="./blackcat/level_2.png" alt="level_2"></p>
<p><strong>做完了局部特性的设计，将他们放置在关卡线路图的特定位置上，重新绘制一份墙和地面有厚度的关卡地图</strong>。</p>
<p><img src="./blackcat/level_3.png" alt="level_3"></p>
<h2 id="制作关卡">制作关卡</h2><p>根据关卡设计图制作关卡，一定要使用地图编辑工具，极大提高效率。找到合适的tileset
后，用地图工具轻松的组装和调整。</p>
<p>首先要做的就是刷好地面，墙和基本背景墙，然后放置关卡的局部设计。局部设计中的各种资源都使用正式的素材和动画进行替换。</p>
<p>对关卡中空余的空间复用这些局部设计，进行一定的调整，充实关卡又尽可能不要产生太重复的感觉。一边调整一边运行游戏，保证自己也能跑通。</p>
<p>最后找来3种能体现关卡风格的背景素材或者tileset，铺设到关卡中，丰富关卡环境表现，每个房间也可以增加一种不同的素材来体现区别。</p>
<p><img src="./blackcat/last_snap.png" alt="last_snap"></p>
<h2 id="总结">总结</h2><ol>
<li>地图编辑器很重要，tilemap虽然简单，但不是很好的选择。那种自定义形状的关卡编辑器效率会更高。</li>
<li>素材是痛。设计游戏时，是否可提前指定素材包？</li>
</ol>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[有志者事竟成]]></title>
        <link href="life/close-to-goal.html"/>
        <published>2014-08-04T16:00:00.000Z</published>
        <updated>2014-08-04T16:00:00.000Z</updated>
        <id>life/close-to-goal.html</id>
        <content type="html" xml:base="" xml:lang="en">
            <![CDATA[ <p>今天我突然想明白一件事情：一个人的意向，会逐渐指导行为向目标靠拢。</p>
<ol>
<li>一个人最终会现实目标，耗时长短大体跟经验积累速度相关；</li>
<li>一个清晰的长期目标和计划，都会 <strong>执行失败</strong>；</li>
</ol>
<p>首先一个清晰的长期目标可能是一个伪命题。对我而言，从来没有清晰的定义自己的长期目标是什么，我只是模糊的想我要大概怎样怎样。<br>我曾经因为定义不了一个清晰的目标痛苦过，因为鸡汤里成功的人总是思路清晰，目标明确，似乎一出生就好像知道自己要成为什么角色。<br>多年下来，我发现人有恐惧。如果说欲望是目标纯粹的本身，那恐惧就是阻挡我们看清目标的烟雾弹。目标是长远的，我们恐惧这个遥远的目标是否只是镜水月花，是否能给与我们所付出的回报。  </p>
<p>我们确实不能准确的计算到达目标所需要的成本和收益，而时间成本是如此稀缺，我们现有的物质财富是如此匮乏，本能总是要我们先解决眼下的温饱。所以，我们根本不会相信自己所设定的清晰目标，把时间无条件的投入。<br>我们首先会投入时间安抚我们的恐惧，甚至克服恐惧会成为我们的其中一个目标。<br>因为恐惧，我们的目标非常容易动摇，一个动摇的目标，是不可能贯彻执行的。</p>
<p>欣慰的是，人只要有大概的意向，总是时不时的做一些事情向期望靠拢。比如暂时控制恐惧后，如果有其他意向，就会投入精力去接触，慢慢的会掌握更多的信息，渐渐实现目标。<br>如果同时有很多意向，多半是这块投入一点，那块投入一点，而不会一下子全投入到一点上以获得突破。这其实是本能，除非投入的结果很清晰，否则我们怎么会全身去投入呢。但清晰的目标是伪命题，就是因为不熟悉我们才会去学习，不熟悉时我们有怎么能定义清晰的结果呢。</p>
<p>所以你同时有很多想做的事情，又不能专注某件事，并不是你的错。人类向目标靠近的时候，其实用的是AStar寻路搜索算法（<em>AStart是启发式的广度优先搜索</em>）。</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[unity3d的纹理尺寸优化]]></title>
        <link href="game-art/unity3d-texture-compress.html"/>
        <published>2014-07-25T16:00:00.000Z</published>
        <updated>2014-07-25T16:00:00.000Z</updated>
        <id>game-art/unity3d-texture-compress.html</id>
        <content type="html" xml:base="" xml:lang="en">
            <![CDATA[ <p>如果想减少手游打包的尺寸，第一步要做的是分析找出热点。<br>在console窗口可以右键打开editorlog，里面列举了本次打包编译的所有资源和大小。进行归类和细分，定位哪块内容最占空间。</p>
<p>一般情况下，有以下3方面消耗了大量空间。</p>
<ol>
<li>UI 素材</li>
<li>场景纹理</li>
<li>动画文件</li>
</ol>
<p>图片最占用空间，动画文件比重虽然不低，但是压缩比高。图片打包时几乎是无法压缩的。<br>因此优化尺寸的重点就是在导入图片时设定正确的压缩格式。</p>
<h2 id="switch-platform-to-android">switch platform to android</h2><p>把build platform默认设置为android，因为unity为你自动转换压缩格式的时候，在android这块处理的并不好，有些方面需要自己去盯着。<br>ios因为硬件的一致性，统一使用PVRTC。<br>ETC1是android目前支持最广泛的压缩格式，和ios的压缩格式一样都是8:1。</p>
<h2 id="1024x1024">1024x1024</h2><p>纹理最大只用1024x1024。<br>更大尺寸的纹理？有些手机支持不了。<br>非方形纹理？无法使用最佳格式去压缩，只能采用失真高，压缩率低的格式。</p>
<p>总之，需要压缩的纹理必须是方形，分辨率限制在1024x1024以下。</p>
<h2 id="拼接和切割ui素材">拼接和切割UI素材</h2><p>UI素材的小元素很多，将多个素材拼接成一个1024大图有以下好处：</p>
<ol>
<li>减少drawcall，提高效率。 移动设备的极限差不多就100 drawcall吧，长时间太高会发烫。</li>
<li>减少图片数量，容易看到优化效果。</li>
<li>大图压缩后的失真程度非常小。</li>
</ol>
<p>为什么要切割呢，主要是有一些长背景素材，如2000x500，可以切成1024x500，再合并成1024x1024的方图进行压缩。<br>如果压缩后太失真，那就不切割，使用原图而不进行压缩，尺寸上也比1024x1024不压缩的小。<br>这需要权衡。</p>
<h2 id="压缩ui素材">压缩UI素材</h2><p>有时候UI素材压缩，会失真，需要尝试看效果是否选择压缩。<br>按钮，边框类的素材一般是不压缩的，因为压缩后容易失真。<br>但如背景类素材，布景类素材压缩后却和原图非常接近。</p>
<p>因为UI素材携带alpha通道，unity在转成android压缩格式时会使用rgba16，这是非常糟糕的压缩格式——低压缩比，高失真。<br>可手工指定android的压缩格式为ETC1，但是ETC1并不包含alpha数据。为了能够显示半透的元素，需要修改shader，传一张alpha通道的纹理进行混合。<br>alpha纹理不需要另外制作，将原图复制一份，设置导入格式为alpha8即可，导入尺寸尽可能缩小到256x256以内。</p>
<h2 id="压缩场景纹理">压缩场景纹理</h2><p>场景纹理总是选择压缩格式，全部都必须是方形的。<br>更重要的是，要避免alpha通道。如果包含了alpha通道，压缩格式手工改成ETC1，无需额外的alpha通道纹理。</p>
]]>
        </content>
    </entry>
</feed>